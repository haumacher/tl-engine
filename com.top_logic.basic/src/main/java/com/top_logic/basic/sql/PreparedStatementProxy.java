/*
 * SPDX-FileCopyrightText: 2012 (c) Business Operation Systems GmbH <info@top-logic.com>
 * 
 * SPDX-License-Identifier: AGPL-3.0-only OR LicenseRef-BOS-TopLogic-1.0
 */
package com.top_logic.basic.sql;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Array;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.Date;
import java.sql.NClob;
import java.sql.ParameterMetaData;
import java.sql.PreparedStatement;
import java.sql.Ref;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.RowId;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Calendar;


/**
 * Abstract proxy for {@link PreparedStatement}.
 * 
 * @see #impl()
 * 
 * @author Automatically generated by <code>com.top_logic.basic.generate.ProxyGenerator</code>
 */
public abstract class PreparedStatementProxy implements PreparedStatement{

	/**
	 * The underlying implementation.
	 */
	protected abstract PreparedStatement impl();

	@Override
	public void setBoolean(int a1, boolean a2) throws SQLException {
		impl().setBoolean(a1, a2);
	}

	@Override
	public void setByte(int a1, byte a2) throws SQLException {
		impl().setByte(a1, a2);
	}

	@Override
	public void setDouble(int a1, double a2) throws SQLException {
		impl().setDouble(a1, a2);
	}

	@Override
	public void setFloat(int a1, float a2) throws SQLException {
		impl().setFloat(a1, a2);
	}

	@Override
	public void setInt(int a1, int a2) throws SQLException {
		impl().setInt(a1, a2);
	}

	@Override
	public void setLong(int a1, long a2) throws SQLException {
		impl().setLong(a1, a2);
	}

	@Override
	public void setShort(int a1, short a2) throws SQLException {
		impl().setShort(a1, a2);
	}

	@Override
	public void setTimestamp(int a1, Timestamp a2) throws SQLException {
		impl().setTimestamp(a1, a2);
	}

	@Override
	public void setTimestamp(int a1, Timestamp a2, Calendar a3) throws SQLException {
		impl().setTimestamp(a1, a2, a3);
	}

	@Override
	public void setURL(int a1, URL a2) throws SQLException {
		impl().setURL(a1, a2);
	}

	@Override
	public boolean execute() throws SQLException {
		return impl().execute();
	}

	@Override
	public void addBatch() throws SQLException {
		impl().addBatch();
	}

	@Override
	public void clearParameters() throws SQLException {
		impl().clearParameters();
	}

	@Override
	public ResultSet executeQuery() throws SQLException {
		return impl().executeQuery();
	}

	@Override
	public int executeUpdate() throws SQLException {
		return impl().executeUpdate();
	}

	@Override
	public ResultSetMetaData getMetaData() throws SQLException {
		return impl().getMetaData();
	}

	@Override
	public ParameterMetaData getParameterMetaData() throws SQLException {
		return impl().getParameterMetaData();
	}

	@Override
	public void setArray(int a1, Array a2) throws SQLException {
		impl().setArray(a1, a2);
	}

	@Override
	public void setAsciiStream(int a1, InputStream a2, int a3) throws SQLException {
		impl().setAsciiStream(a1, a2, a3);
	}

	@Override
	public void setAsciiStream(int a1, InputStream a2) throws SQLException {
		impl().setAsciiStream(a1, a2);
	}

	@Override
	public void setAsciiStream(int a1, InputStream a2, long a3) throws SQLException {
		impl().setAsciiStream(a1, a2, a3);
	}

	@Override
	public void setBigDecimal(int a1, BigDecimal a2) throws SQLException {
		impl().setBigDecimal(a1, a2);
	}

	@Override
	public void setBinaryStream(int a1, InputStream a2, long a3) throws SQLException {
		impl().setBinaryStream(a1, a2, a3);
	}

	@Override
	public void setBinaryStream(int a1, InputStream a2, int a3) throws SQLException {
		impl().setBinaryStream(a1, a2, a3);
	}

	@Override
	public void setBinaryStream(int a1, InputStream a2) throws SQLException {
		impl().setBinaryStream(a1, a2);
	}

	@Override
	public void setBlob(int a1, InputStream a2) throws SQLException {
		impl().setBlob(a1, a2);
	}

	@Override
	public void setBlob(int a1, Blob a2) throws SQLException {
		impl().setBlob(a1, a2);
	}

	@Override
	public void setBlob(int a1, InputStream a2, long a3) throws SQLException {
		impl().setBlob(a1, a2, a3);
	}

	@Override
	public void setBytes(int a1, byte[] a2) throws SQLException {
		impl().setBytes(a1, a2);
	}

	@Override
	public void setCharacterStream(int a1, Reader a2) throws SQLException {
		impl().setCharacterStream(a1, a2);
	}

	@Override
	public void setCharacterStream(int a1, Reader a2, int a3) throws SQLException {
		impl().setCharacterStream(a1, a2, a3);
	}

	@Override
	public void setCharacterStream(int a1, Reader a2, long a3) throws SQLException {
		impl().setCharacterStream(a1, a2, a3);
	}

	@Override
	public void setClob(int a1, Reader a2, long a3) throws SQLException {
		impl().setClob(a1, a2, a3);
	}

	@Override
	public void setClob(int a1, Clob a2) throws SQLException {
		impl().setClob(a1, a2);
	}

	@Override
	public void setClob(int a1, Reader a2) throws SQLException {
		impl().setClob(a1, a2);
	}

	@Override
	public void setDate(int a1, Date a2, Calendar a3) throws SQLException {
		impl().setDate(a1, a2, a3);
	}

	@Override
	public void setDate(int a1, Date a2) throws SQLException {
		impl().setDate(a1, a2);
	}

	@Override
	public void setNCharacterStream(int a1, Reader a2, long a3) throws SQLException {
		impl().setNCharacterStream(a1, a2, a3);
	}

	@Override
	public void setNCharacterStream(int a1, Reader a2) throws SQLException {
		impl().setNCharacterStream(a1, a2);
	}

	@Override
	public void setNClob(int a1, NClob a2) throws SQLException {
		impl().setNClob(a1, a2);
	}

	@Override
	public void setNClob(int a1, Reader a2, long a3) throws SQLException {
		impl().setNClob(a1, a2, a3);
	}

	@Override
	public void setNClob(int a1, Reader a2) throws SQLException {
		impl().setNClob(a1, a2);
	}

	@Override
	public void setNString(int a1, String a2) throws SQLException {
		impl().setNString(a1, a2);
	}

	@Override
	public void setNull(int a1, int a2) throws SQLException {
		impl().setNull(a1, a2);
	}

	@Override
	public void setNull(int a1, int a2, String a3) throws SQLException {
		impl().setNull(a1, a2, a3);
	}

	@Override
	public void setObject(int a1, Object a2) throws SQLException {
		impl().setObject(a1, a2);
	}

	@Override
	public void setObject(int a1, Object a2, int a3) throws SQLException {
		impl().setObject(a1, a2, a3);
	}

	@Override
	public void setObject(int a1, Object a2, int a3, int a4) throws SQLException {
		impl().setObject(a1, a2, a3, a4);
	}

	@Override
	public void setRef(int a1, Ref a2) throws SQLException {
		impl().setRef(a1, a2);
	}

	@Override
	public void setRowId(int a1, RowId a2) throws SQLException {
		impl().setRowId(a1, a2);
	}

	@Override
	public void setSQLXML(int a1, SQLXML a2) throws SQLException {
		impl().setSQLXML(a1, a2);
	}

	@Override
	public void setString(int a1, String a2) throws SQLException {
		impl().setString(a1, a2);
	}

	@Override
	public void setTime(int a1, Time a2, Calendar a3) throws SQLException {
		impl().setTime(a1, a2, a3);
	}

	@Override
	public void setTime(int a1, Time a2) throws SQLException {
		impl().setTime(a1, a2);
	}

	@Deprecated
	@Override
	public void setUnicodeStream(int a1, InputStream a2, int a3) throws SQLException {
		impl().setUnicodeStream(a1, a2, a3);
	}

	@Override
	public void close() throws SQLException {
		impl().close();
	}

	@Override
	public boolean execute(String a1, int[] a2) throws SQLException {
		return impl().execute(a1, a2);
	}

	@Override
	public boolean execute(String a1) throws SQLException {
		return impl().execute(a1);
	}

	@Override
	public boolean execute(String a1, String[] a2) throws SQLException {
		return impl().execute(a1, a2);
	}

	@Override
	public boolean execute(String a1, int a2) throws SQLException {
		return impl().execute(a1, a2);
	}

	@Override
	public void addBatch(String a1) throws SQLException {
		impl().addBatch(a1);
	}

	@Override
	public ResultSet executeQuery(String a1) throws SQLException {
		return impl().executeQuery(a1);
	}

	@Override
	public int executeUpdate(String a1, int a2) throws SQLException {
		return impl().executeUpdate(a1, a2);
	}

	@Override
	public int executeUpdate(String a1) throws SQLException {
		return impl().executeUpdate(a1);
	}

	@Override
	public int executeUpdate(String a1, String[] a2) throws SQLException {
		return impl().executeUpdate(a1, a2);
	}

	@Override
	public int executeUpdate(String a1, int[] a2) throws SQLException {
		return impl().executeUpdate(a1, a2);
	}

	@Override
	public void cancel() throws SQLException {
		impl().cancel();
	}

	@Override
	public void clearBatch() throws SQLException {
		impl().clearBatch();
	}

	@Override
	public void clearWarnings() throws SQLException {
		impl().clearWarnings();
	}

	@Override
	public int[] executeBatch() throws SQLException {
		return impl().executeBatch();
	}

	@Override
	public Connection getConnection() throws SQLException {
		return impl().getConnection();
	}

	@Override
	public int getFetchDirection() throws SQLException {
		return impl().getFetchDirection();
	}

	@Override
	public int getFetchSize() throws SQLException {
		return impl().getFetchSize();
	}

	@Override
	public ResultSet getGeneratedKeys() throws SQLException {
		return impl().getGeneratedKeys();
	}

	@Override
	public int getMaxFieldSize() throws SQLException {
		return impl().getMaxFieldSize();
	}

	@Override
	public int getMaxRows() throws SQLException {
		return impl().getMaxRows();
	}

	@Override
	public boolean getMoreResults() throws SQLException {
		return impl().getMoreResults();
	}

	@Override
	public boolean getMoreResults(int a1) throws SQLException {
		return impl().getMoreResults(a1);
	}

	@Override
	public int getQueryTimeout() throws SQLException {
		return impl().getQueryTimeout();
	}

	@Override
	public ResultSet getResultSet() throws SQLException {
		return impl().getResultSet();
	}

	@Override
	public int getResultSetConcurrency() throws SQLException {
		return impl().getResultSetConcurrency();
	}

	@Override
	public int getResultSetHoldability() throws SQLException {
		return impl().getResultSetHoldability();
	}

	@Override
	public int getResultSetType() throws SQLException {
		return impl().getResultSetType();
	}

	@Override
	public int getUpdateCount() throws SQLException {
		return impl().getUpdateCount();
	}

	@Override
	public SQLWarning getWarnings() throws SQLException {
		return impl().getWarnings();
	}

	@Override
	public boolean isClosed() throws SQLException {
		return impl().isClosed();
	}

	@Override
	public boolean isPoolable() throws SQLException {
		return impl().isPoolable();
	}

	@Override
	public void setCursorName(String a1) throws SQLException {
		impl().setCursorName(a1);
	}

	@Override
	public void setEscapeProcessing(boolean a1) throws SQLException {
		impl().setEscapeProcessing(a1);
	}

	@Override
	public void setFetchDirection(int a1) throws SQLException {
		impl().setFetchDirection(a1);
	}

	@Override
	public void setFetchSize(int a1) throws SQLException {
		impl().setFetchSize(a1);
	}

	@Override
	public void setMaxFieldSize(int a1) throws SQLException {
		impl().setMaxFieldSize(a1);
	}

	@Override
	public void setMaxRows(int a1) throws SQLException {
		impl().setMaxRows(a1);
	}

	@Override
	public void setPoolable(boolean a1) throws SQLException {
		impl().setPoolable(a1);
	}

	@Override
	public void setQueryTimeout(int a1) throws SQLException {
		impl().setQueryTimeout(a1);
	}

	@Override
	public boolean isWrapperFor(Class<?> a1) throws SQLException {
		return impl().isWrapperFor(a1);
	}

	@Override
	public <T> T unwrap(Class<T> a1) throws SQLException {
		return impl().unwrap(a1);
	}

	@Override
	public void closeOnCompletion() throws SQLException {
		impl().closeOnCompletion();
	}

	@Override
	public boolean isCloseOnCompletion() throws SQLException {
		return impl().isCloseOnCompletion();
	}

}
