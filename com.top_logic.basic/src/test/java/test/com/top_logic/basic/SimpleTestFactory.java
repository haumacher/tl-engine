/*
 * SPDX-FileCopyrightText: 2010 (c) Business Operation Systems GmbH <info@top-logic.com>
 * 
 * SPDX-License-Identifier: AGPL-3.0-only OR LicenseRef-BOS-TopLogic-1.0
 */
package test.com.top_logic.basic;

import junit.framework.AssertionFailedError;
import junit.framework.Test;

/**
 * The class {@link SimpleTestFactory} is a simple factory to create test
 * (either broken or successful).
 * 
 * @author <a href="mailto:daniel.busche@top-logic.com">Daniel Busche</a>
 */
public class SimpleTestFactory {

	/**
	 * A {@link GenericTest} which produces an {@link AssertionFailedError
	 * failure}.
	 * 
	 * @author <a href="mailto:daniel.busche@top-logic.com">Daniel Busche</a>
	 */
	static class FailureTest extends GenericTest {

		private final String _message;

		private final Throwable _ex;

		public FailureTest(String testName, String message, Throwable ex) {
			super(testName);
			_message = message;
			_ex = ex;
		}

		@Override
		protected void executeTest() throws Throwable {
			throw new AssertionFailedError(_message).initCause(_ex);
		}

	}

	/**
	 * A {@link GenericTest} which produces an {@link Exception error}.
	 * 
	 * @author <a href="mailto:daniel.busche@top-logic.com">Daniel Busche</a>
	 */
	static class ErrorTest extends GenericTest {

		private final String _message;

		private final Throwable _ex;

		public ErrorTest(String testName, String message, Throwable ex) {
			super(testName);
			_message = message;
			_ex = ex;
		}

		@Override
		protected void executeTest() throws Throwable {
			throw new Exception(_message, _ex);
		}

	}

	/**
	 * A {@link GenericTest} which throws an existing {@link Throwable}.
	 * 
	 * @author <a href="mailto:daniel.busche@top-logic.com">Daniel Busche</a>
	 */
	static class ExceptionTest extends GenericTest {
		
		private final Throwable _problem;

		public ExceptionTest(String testName, Throwable problem) {
			super(testName);
			this._problem = problem;
		}

		@Override
		protected void executeTest() throws Throwable {
			throw _problem;
		}
		
	}
	
	/**
	 * Test which completes successful.
	 * 
	 * @author <a href="mailto:daniel.busche@top-logic.com">Daniel Busche</a>
	 */
	static class SuccessfulTest extends GenericTest {

		public SuccessfulTest(String testName) {
			super(testName);
		}

		@Override
		protected void executeTest() throws Throwable {
			// everything ok here
		}

	}

	/**
	 * Creates a {@link Test} that does not succeed without a causing exception.
	 * 
	 * @see #newBrokenTest(boolean, String, Throwable, String)
	 */
	public static Test newBrokenTest(boolean error, String message, String testName) {
		return newBrokenTest(error, message, null, testName);
	}

	/**
	 * Creates a {@link Test} that does not succeed.
	 * 
	 * @param error
	 *        whether an error shall occur or just a failure
	 * @param message
	 *        the message to inform about the kind of error (or failure).
	 * @param ex
	 *        The optional exception that caused the failure.
	 * @param testName
	 *        the name of the broken test.
	 */
	public static Test newBrokenTest(boolean error, String message, Throwable ex, String testName) {
		return error ? new ErrorTest(testName, message, ex) : new FailureTest(testName, message, ex);
	}

	/**
	 * Creates a {@link Test} that throws the given Throwable.
	 * 
	 * @param testName
	 *        the name of the broken test.
	 * @param problem
	 *        the problem to report as error test.
	 */
	public static Test newBrokenTest(String testName, Throwable problem) {
		return new ExceptionTest(testName, problem);
	}
	
	public static Test newBrokenTest(boolean error, String message, Class<?> callingClass) {
		return newBrokenTest(error, message, null, callingClass);
	}

	public static Test newBrokenTest(boolean error, String message, Throwable ex, Class<?> callingClass) {
		String testName = "Test generated by " + callingClass;
		return newBrokenTest(error, message, ex, testName);
	}

	/**
	 * Creates a successful {@link Test}.
	 * 
	 * @param testName
	 *        the name of the resulting test.
	 */
	public static Test newSuccessfulTest(String testName) {
		return new SuccessfulTest(testName);
	}

}
