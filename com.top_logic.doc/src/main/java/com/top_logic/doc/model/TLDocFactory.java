/*
 * SPDX-FileCopyrightText: 2022 (c) Business Operation Systems GmbH <info@top-logic.com>
 * 
 * SPDX-License-Identifier: AGPL-3.0-only OR LicenseRef-BOS-TopLogic-1.0
 */
package com.top_logic.doc.model;

/**
 * Factory for <code>tl.doc</code> objects.
 * 
 * <p>
 * Note: this is generated code. Do not modify. Instead, create a subclass and register this in the module system.
 * </p>
 * 
 * @author Automatically generated by {@link com.top_logic.element.model.generate.FactoryGenerator}
 */
public class TLDocFactory extends com.top_logic.element.structured.wrap.StructuredElementWrapperFactory {

	/**
	 * Name of singleton {@link #TL_DOC_STRUCTURE}.
	 */
	public static final String SINGLETON_ROOT = "ROOT";

	/**
	 * Name of the structure <code>tl.doc</code> defined by {@link TLDocFactory}.
	 */
	public static final String TL_DOC_STRUCTURE = "tl.doc";

	/**
	 * Lookup {@link Root} type.
	 */
	public static com.top_logic.model.TLClass getRootType() {
		return (com.top_logic.model.TLClass) com.top_logic.util.model.ModelService.getApplicationModel().getModule(TL_DOC_STRUCTURE).getType(Root.ROOT_TYPE);
	}

	/**
	 * Lookup {@link Root#NAME_ATTR} of {@link Root}.
	 */
	public static com.top_logic.model.TLProperty getNameRootAttr() {
		return (com.top_logic.model.TLProperty) getRootType().getPart(Root.NAME_ATTR);
	}

	/**
	 * Lookup {@link Page} type.
	 */
	public static com.top_logic.model.TLClass getPageType() {
		return (com.top_logic.model.TLClass) com.top_logic.util.model.ModelService.getApplicationModel().getModule(TL_DOC_STRUCTURE).getType(Page.PAGE_TYPE);
	}

	/**
	 * Lookup {@link Page#CHILDREN_ATTR} of {@link Page}.
	 */
	public static com.top_logic.model.TLReference getChildrenPageAttr() {
		return (com.top_logic.model.TLReference) getPageType().getPart(Page.CHILDREN_ATTR);
	}

	/**
	 * Lookup {@link Page#CONTENT_ATTR} of {@link Page}.
	 */
	public static com.top_logic.model.TLProperty getContentPageAttr() {
		return (com.top_logic.model.TLProperty) getPageType().getPart(Page.CONTENT_ATTR);
	}

	/**
	 * Lookup {@link Page#IMPORT_SOURCE_ATTR} of {@link Page}.
	 */
	public static com.top_logic.model.TLProperty getImportSourcePageAttr() {
		return (com.top_logic.model.TLProperty) getPageType().getPart(Page.IMPORT_SOURCE_ATTR);
	}

	/**
	 * Lookup {@link Page#NAME_ATTR} of {@link Page}.
	 */
	public static com.top_logic.model.TLProperty getNamePageAttr() {
		return (com.top_logic.model.TLProperty) getPageType().getPart(Page.NAME_ATTR);
	}

	/**
	 * Lookup {@link Page#PARENT_ATTR} of {@link Page}.
	 */
	public static com.top_logic.model.TLReference getParentPageAttr() {
		return (com.top_logic.model.TLReference) getPageType().getPart(Page.PARENT_ATTR);
	}

	/**
	 * Lookup {@link Page#POSITION_ATTR} of {@link Page}.
	 */
	public static com.top_logic.model.TLProperty getPositionPageAttr() {
		return (com.top_logic.model.TLProperty) getPageType().getPart(Page.POSITION_ATTR);
	}

	/**
	 * Lookup {@link Page#TITLE_ATTR} of {@link Page}.
	 */
	public static com.top_logic.model.TLProperty getTitlePageAttr() {
		return (com.top_logic.model.TLProperty) getPageType().getPart(Page.TITLE_ATTR);
	}

	/**
	 * Lookup {@link Page#UUID_ATTR} of {@link Page}.
	 */
	public static com.top_logic.model.TLProperty getUuidPageAttr() {
		return (com.top_logic.model.TLProperty) getPageType().getPart(Page.UUID_ATTR);
	}

	/**
	 * Name of type <code>Root</code> in structure {@link #TL_DOC_STRUCTURE}.
	 * 
	 * @deprecated Use {@link Root#ROOT_TYPE}.
	 */
	@Deprecated
	public static final String ROOT_NODE = Root.ROOT_TYPE;

	/**
	 * Storage table name of {@link #ROOT_NODE} objects.
	 */
	public static final String KO_NAME_ROOT = "tl.doc.Page";

	/**
	 * Name of type <code>Page</code> in structure {@link #TL_DOC_STRUCTURE}.
	 * 
	 * @deprecated Use {@link Page#PAGE_TYPE}.
	 */
	@Deprecated
	public static final String PAGE_NODE = Page.PAGE_TYPE;

	/**
	 * Storage table name of {@link #PAGE_NODE} objects.
	 */
	public static final String KO_NAME_PAGE = "tl.doc.Page";

	/**
	 * Singleton <code>ROOT</code>.
	 */
	public Root getRootSingleton() {
		return (Root) lookupSingleton(SINGLETON_ROOT);
	}

	/**
	 * Singleton <code>ROOT</code> on given branch.
	 */
	public Root getRootSingleton(com.top_logic.knowledge.service.Branch requestedBranch) {
		return (Root) lookupSingleton(SINGLETON_ROOT, requestedBranch);
	}

	/**
	 * Singleton <code>ROOT</code> on given branch in given revision.
	 */
	public Root getRootSingleton(com.top_logic.knowledge.service.Branch requestedBranch, com.top_logic.knowledge.service.Revision historyContext) {
		return (Root) lookupSingleton(SINGLETON_ROOT, requestedBranch, historyContext);
	}


	/**
	 * Create an instance of {@link Root} type.
	 */
	public final Root createRoot(com.top_logic.model.TLObject context) {
		return (Root) createObject(getRootType(), context);
	}

	/**
	 * Create an instance of {@link Root} type.
	 */
	public final Root createRoot() {
		return createRoot(null);
	}

	/**
	 * Create an instance of {@link Page} type.
	 */
	public final Page createPage(com.top_logic.model.TLObject context) {
		return (Page) createObject(getPageType(), context);
	}

	/**
	 * Create an instance of {@link Page} type.
	 */
	public final Page createPage() {
		return createPage(null);
	}

	/**
	 * The singleton instance of {@link TLDocFactory}.
	 */
	public static TLDocFactory getInstance() {
		return (TLDocFactory) com.top_logic.element.model.DynamicModelService.getFactoryFor(TL_DOC_STRUCTURE);
	}
}
