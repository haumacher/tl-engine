/*
 * SPDX-FileCopyrightText: 2006 (c) Business Operation Systems GmbH <info@top-logic.com>
 * 
 * SPDX-License-Identifier: AGPL-3.0-only OR LicenseRef-BOS-TopLogic-1.0
 */
package test.com.top_logic.dsa.evt;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;

import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;

import test.com.top_logic.dsa.DSATestSetup;

import com.top_logic.basic.Logger;
import com.top_logic.basic.io.FileUtilities;
import com.top_logic.dsa.DatabaseAccessException;
import com.top_logic.dsa.evt.AbstractDataChangeListener;
import com.top_logic.dsa.evt.DataChangeEvent;
import com.top_logic.dsa.file.FilesystemDataSourceAdaptor;

/**
 * Testcase for the {@link AbstractDataChangeListener}.
 * 
 * @author    <a href=mailto:kha@top-logic.com>Klaus Halfmann</a>
 */
public class TestAbstractDataChangeListener extends TestCase {

    /** DemoData used for Streamning */
    public static final byte DATA[] = 
		("This is some Data generated by " + TestAbstractDataChangeListener.class.getName()).getBytes();
	private static final boolean NOFORCE = false;

	@Override
	protected void setUp() throws Exception {
		super.setUp();
		File dir = new File("tmp/FDSA");
		assertTrue("Unable to create directory " + dir, dir.mkdir());
	}

	@Override
	protected void tearDown() throws Exception {
		FileUtilities.deleteR(new File("tmp/FDSA"));
		super.tearDown();
	}

	/**
	 * Main testcase for now.
	 */
    public void testDataCreated() throws DatabaseAccessException, IOException {
		FilesystemDataSourceAdaptor fdsa = new FilesystemDataSourceAdaptor("./tmp/FDSA");
        fdsa.setProtocol("t");
        TestedListener tli = new TestedListener();
        
        assertTrue (fdsa.addDataChangeListener(tli));
        assertFalse(fdsa.addDataChangeListener(tli));
        
        fdsa.createEntry("", "anEntry", getInputStream());
        assertNotNull(tli.created);
        assertEquals(DataChangeEvent.ENTRY_CREATED  , tli.created.getChangeMode());
        assertEquals("t://anEntry"                  , tli.created.getMessage());
        tli.created = null;

        fdsa.putEntry("anEntry", getInputStream());
        assertNotNull(tli.modified);
        assertEquals(DataChangeEvent.ENTRY_MODIFIED , tli.modified.getChangeMode());
        assertEquals("t://anEntry"                  , tli.modified.getMessage());
        tli.modified = null;

        fdsa.getEntryOutputStream("anEntry").close();
        assertNotNull(tli.modified);
        assertEquals(DataChangeEvent.ENTRY_MODIFIED , tli.modified.getChangeMode());
        assertEquals("t://anEntry"                  , tli.modified.getMessage());
        tli.modified = null;
        
        fdsa.getEntryAppendStream("anEntry").close();
        assertNotNull(tli.modified);
        assertEquals(DataChangeEvent.ENTRY_MODIFIED , tli.modified.getChangeMode());
        assertEquals("t://anEntry"                  , tli.modified.getMessage());        
        tli.modified = null;

        fdsa.delete("anEntry", NOFORCE);
        assertNotNull(tli.deleted);
        assertEquals(DataChangeEvent.ENTRY_DELETED  , tli.deleted.getChangeMode());
        assertEquals("t://anEntry"                  , tli.deleted.getMessage());
        tli.deleted = null;
        
        fdsa.createEntry("", "anEntry", getInputStream());

        fdsa.deleteRecursively("anEntry");
        assertNotNull(tli.deleted);
        assertEquals(DataChangeEvent.ENTRY_DELETED  , tli.deleted.getChangeMode());
        assertEquals("t://anEntry"                  , tli.deleted.getMessage());
        tli.deleted = null;
        
        fdsa.createContainer("", "aDir");
        assertNotNull(tli.created);
        assertEquals(DataChangeEvent.CONTAINER_CREATED  , tli.created.getChangeMode());
        assertEquals("t://aDir"                         , tli.created.getMessage());
        tli.created = null;
        
        fdsa.delete("aDir", NOFORCE);
        assertNotNull(tli.deleted);
        assertEquals(DataChangeEvent.CONTAINER_DELETED,  tli.deleted.getChangeMode());
        assertEquals("t://aDir",                         tli.deleted.getMessage());
        tli.deleted = null;

        fdsa.createContainer("", "aDir");
        fdsa.createEntry("aDir", "anEntry", getInputStream());

        fdsa.deleteRecursively("aDir");
        assertNotNull(tli.deletedR);
        assertEquals(DataChangeEvent.CONTAINER_DELETEDREC   , tli.deletedR.getChangeMode());
        assertEquals("t://aDir"                             , tli.deletedR.getMessage());
        tli.deletedR = null;
        
        assertTrue (fdsa.removeDataChangeListener(tli));
        assertFalse(fdsa.removeDataChangeListener(tli));

    }
    
    /** Create an InputStream with some demo-Data */
    protected InputStream getInputStream() {
        return new ByteArrayInputStream(DATA);
    }


    // inner class for Testing
    
    /**
     * Subclass of AbstractDataChangeListener for testing.
     */
    static class TestedListener extends AbstractDataChangeListener{

        /** Event that was sent to dataCreated  method */
        DataChangeEvent created;
        
        /** Event that was sent to dataDeleted  method */
        DataChangeEvent deleted;

        /** Event that was sent to dataCreated  method */
        DataChangeEvent deletedR;

        /** Event that was sent to dataCreated  method */
        DataChangeEvent modified;

        /** 
         * Record anEvent for Testing.
         */
        @Override
		protected void dataCreated(DataChangeEvent anEvent) {
            created = anEvent;
        }

        /** 
         * Record anEvent for Testing.
         */
        @Override
		protected void dataDeleted(DataChangeEvent anEvent) {
            deleted = anEvent;
        }

        /** 
         * Record anEvent for Testing.
         */
        @Override
		protected void dataDeletedR(DataChangeEvent anEvent) {
            deletedR = anEvent;
        }

        /** 
         * Record anEvent for Testing.
         */
        @Override
		protected void dataModified(DataChangeEvent anEvent) {
            modified = anEvent;
        }
        
    }
    
    /** Return the suite of Tests to perform */
    public static Test suite () {
        Test suite = new TestSuite (TestAbstractDataChangeListener.class);
        // Test suite = new TestAbstractDataChangeListener("testTypes");
        return DSATestSetup.createDSATestSetup(suite);
    }

    /** Main function for direct execution */
    public static void main (String[] args) {
        Logger.configureStdout();
        
        junit.textui.TestRunner.run (suite ());
    }

}
