/*
 * SPDX-FileCopyrightText: 2019 (c) Business Operation Systems GmbH <info@top-logic.com>
 * 
 * SPDX-License-Identifier: AGPL-3.0-only OR LicenseRef-BOS-TopLogic-1.0
 */
package com.top_logic.demo.layout.form.demo;

import static com.top_logic.basic.col.CustomComparator.*;
import static com.top_logic.basic.config.TypedConfiguration.*;
import static com.top_logic.basic.config.misc.TypedConfigUtil.*;
import static com.top_logic.basic.shared.collection.factory.CollectionFactoryShared.list;
import static com.top_logic.basic.shared.function.FunctionUtil.*;
import static com.top_logic.demo.layout.form.demo.I18NConstants.*;
import static com.top_logic.layout.basic.ResourceRenderer.*;
import static com.top_logic.layout.form.model.FormFactory.*;
import static com.top_logic.layout.table.model.TableConfigurationFactory.combine;
import static com.top_logic.layout.table.provider.GenericTableConfigurationProvider.*;
import static com.top_logic.layout.tree.model.TLTreeNodeResourceProvider.*;
import static java.util.Collections.*;

import java.util.List;
import java.util.function.Consumer;

import com.top_logic.basic.util.ResKey;
import com.top_logic.layout.IdentityAccessor;
import com.top_logic.layout.Renderer;
import com.top_logic.layout.ResourceProvider;
import com.top_logic.layout.basic.ResourceRenderer;
import com.top_logic.layout.form.model.FormContext;
import com.top_logic.layout.form.model.FormGroup;
import com.top_logic.layout.form.model.SelectField;
import com.top_logic.layout.form.model.StringField;
import com.top_logic.layout.form.selection.SelectDialogProvider;
import com.top_logic.layout.form.template.SelectionControlProvider;
import com.top_logic.layout.table.CellRenderer;
import com.top_logic.layout.table.model.ColumnConfiguration;
import com.top_logic.layout.table.model.FunctionalTableConfigProvider;
import com.top_logic.layout.table.model.TableConfiguration;
import com.top_logic.layout.table.model.TableConfigurationProvider;
import com.top_logic.layout.table.provider.GenericTableConfigurationProvider;
import com.top_logic.layout.table.renderer.UniformCellRenderer;
import com.top_logic.layout.tree.model.DefaultMutableTLTreeModel;
import com.top_logic.layout.tree.model.DefaultMutableTLTreeNode;
import com.top_logic.mig.html.ModelBuilder;
import com.top_logic.mig.html.layout.LayoutComponent;
import com.top_logic.util.Resources;

/**
 * A demonstration for customizing table "popup select dialogs".
 * 
 * @author <a href="mailto:jst@top-logic.com">Jan Stolzenburg</a>
 */
public class DemoTablePopupSelectCustomization implements ModelBuilder {

	/** The name of the field describing this page to the user. */
	public static final String DESCRIPTION = "description";

	/** The example of a standard table with no customization. */
	public static final String TABLE_WITH_STANDARD_SETTINGS = "tableWithStandardSettings";

	/**
	 * The {@link FormGroup} for the examples of a non-tree table with a customization of a column.
	 */
	public static final String TABLE_FIELDS = "tableFields";

	/**
	 * The {@link FormGroup} for the examples of a table with a customization of the
	 * {@link GenericTableConfigurationProvider#NAME_COLUMN name column}.
	 */
	public static final String TABLE_WITH_NAME_COLUMN_FIELDS = "tableWithNameColumnFields";

	/**
	 * The example of a custom {@link ResourceProvider} on the
	 * {@link GenericTableConfigurationProvider#NAME_COLUMN name column}.
	 */
	public static final String TABLE_WITH_NAME_COLUMN_RESOURCE_PROVIDER = "tableWithNameResourceProvider";

	/**
	 * The example of a custom {@link Renderer} on the
	 * {@link GenericTableConfigurationProvider#NAME_COLUMN name column}.
	 */
	public static final String TABLE_WITH_NAME_COLUMN_RENDERER = "tableWithNameRenderer";

	/**
	 * The example of a custom {@link CellRenderer} on the
	 * {@link GenericTableConfigurationProvider#NAME_COLUMN name column}.
	 */
	public static final String TABLE_WITH_NAME_COLUMN_CELL_RENDERER = "tableWithNameCellRenderer";

	/**
	 * The {@link FormGroup} for the examples of a table with a customization of an additional
	 * column that is not generated by the generic.
	 */
	public static final String TABLE_WITH_CUSTOM_COLUMN_FIELDS = "tableWithCustomColumnFields";

	/**
	 * The example of a custom {@link ResourceProvider} on the
	 * {@link GenericTableConfigurationProvider#NAME_COLUMN name column}.
	 */
	public static final String TABLE_WITH_CUSTOM_COLUMN_RESOURCE_PROVIDER = "tableWithCustomColumnResourceProvider";

	/**
	 * The example of a custom {@link Renderer} on the
	 * {@link GenericTableConfigurationProvider#NAME_COLUMN name column}.
	 */
	public static final String TABLE_WITH_CUSTOM_COLUMN_RENDERER = "tableWithCustomColumnRenderer";

	/**
	 * The example of a custom {@link CellRenderer} on the
	 * {@link GenericTableConfigurationProvider#NAME_COLUMN name column}.
	 */
	public static final String TABLE_WITH_CUSTOM_COLUMN_CELL_RENDERER = "tableWithCustomColumnCellRenderer";

	/** The example of a standard tree table with no customizations. */
	public static final String TREE_WITH_STANDARD_SETTINGS = "treeWithStandardSettings";

	/**
	 * The {@link FormGroup} for the examples of a tree table with a customization of a column.
	 */
	public static final String TREE_FIELDS = "treeFields";

	/**
	 * The {@link FormGroup} for the examples of a tree table with a customization of the
	 * {@link GenericTableConfigurationProvider#NAME_COLUMN name column}.
	 */
	public static final String TREE_WITH_NAME_COLUMN_FIELDS = "treeWithNameColumnFields";

	/**
	 * The example of a custom {@link ResourceProvider} on the
	 * {@link GenericTableConfigurationProvider#NAME_COLUMN name column}.
	 */
	public static final String TREE_WITH_NAME_COLUMN_RESOURCE_PROVIDER = "treeWithNameResourceProvider";

	/**
	 * The example of a custom {@link Renderer} on the
	 * {@link GenericTableConfigurationProvider#NAME_COLUMN name column}.
	 */
	public static final String TREE_WITH_NAME_COLUMN_RENDERER = "treeWithNameRenderer";

	/**
	 * The example of a custom {@link CellRenderer} on the
	 * {@link GenericTableConfigurationProvider#NAME_COLUMN name column}.
	 */
	public static final String TREE_WITH_NAME_COLUMN_CELL_RENDERER = "treeWithNameCellRenderer";

	/**
	 * The {@link FormGroup} for the examples of a tree table with a customization of an additional
	 * column that is not generated by the generic.
	 */
	public static final String TREE_WITH_CUSTOM_COLUMN_FIELDS = "treeWithCustomColumnFields";

	/**
	 * The example of a custom {@link ResourceProvider} on the
	 * {@link GenericTableConfigurationProvider#NAME_COLUMN name column}.
	 */
	public static final String TREE_WITH_CUSTOM_COLUMN_RESOURCE_PROVIDER = "treeWithCustomColumnResourceProvider";

	/**
	 * The example of a custom {@link Renderer} on the
	 * {@link GenericTableConfigurationProvider#NAME_COLUMN name column}.
	 */
	public static final String TREE_WITH_CUSTOM_COLUMN_RENDERER = "treeWithCustomColumnRenderer";

	/**
	 * The example of a custom {@link CellRenderer} on the
	 * {@link GenericTableConfigurationProvider#NAME_COLUMN name column}.
	 */
	public static final String TREE_WITH_CUSTOM_COLUMN_CELL_RENDERER = "treeWithCustomColumnCellRenderer";

	private static final String CUSTOM_COLUMN = "custom";

	private static final String ONE = "One";

	private static final String LIST_OPTION_DEFAULT = ONE;

	private static final List<String> LIST_OPTIONS = list(ONE, "Two", "Three", "Four", "Five", "Six");

	private static final DefaultMutableTLTreeModel TREE_OPTIONS = new DefaultMutableTLTreeModel("Four");
	static {
		DefaultMutableTLTreeNode four = TREE_OPTIONS.getRoot();
		DefaultMutableTLTreeNode two = four.createChild("Two");
		two.createChild("One");
		two.createChild("Three");
		DefaultMutableTLTreeNode six = four.createChild("Six");
		six.createChild("Five");
		six.createChild("Seven");
	}

	private static final List<String> TREE_OPTIONS_AS_LIST =
		list("One", "Two", "Three", "Four", "Five", "Six", "Seven");

	private static final DefaultMutableTLTreeNode TREE_OPTION_DEFAULT =
		TREE_OPTIONS.getRoot().getChildAt(0).getChildAt(1);

	/**
	 * Singleton {@link DemoTablePopupSelectCustomization} instance.
	 */
	public static final DemoTablePopupSelectCustomization INSTANCE = new DemoTablePopupSelectCustomization();

	private DemoTablePopupSelectCustomization() {
		// Singleton constructor.
	}

	@Override
	public boolean supportsModel(Object model, LayoutComponent component) {
		return model == null;
	}

	@Override
	public Object getModel(Object model, LayoutComponent component) {
		FormContext formContext = new FormContext(component);
		addDescriptionField(formContext);
		addTableFields(formContext);
		addTreeFields(formContext);
		return formContext;
	}

	private void addDescriptionField(FormContext formContext) {
		StringField field = newExpandableStringField(DESCRIPTION);
		field.setImmutable(IMMUTABLE);
		field.initializeField(translate(CUSTOM_SELECT_DIALOG_DESCRIPTION));
		formContext.addMember(field);
	}

	private void addTreeFields(FormContext formContext) {
		FormGroup treeGroup = new FormGroup(TREE_FIELDS, CUSTOM_TREE_SELECT_DIALOG_GROUP);
		addTree(treeGroup, TREE_WITH_STANDARD_SETTINGS, noOpConsumer());
		addTreeNameColumnFields(treeGroup);
		addTreeCustomColumnFields(treeGroup);
		formContext.addMember(treeGroup);
	}

	private void addTableFields(FormContext formContext) {
		FormGroup tableGroup = new FormGroup(TABLE_FIELDS, CUSTOM_TABLE_SELECT_DIALOG_GROUP);
		addTable(tableGroup, TABLE_WITH_STANDARD_SETTINGS, noOpConsumer());
		addTableNameColumnFields(tableGroup);
		addTableCustomColumnFields(tableGroup);
		formContext.addMember(tableGroup);
	}

	private void addTableNameColumnFields(FormGroup parentGroup) {
		FormGroup group = new FormGroup(TABLE_WITH_NAME_COLUMN_FIELDS, CUSTOM_TABLE_SELECT_DIALOG_NAME_COLUMN_GROUP);
		addTable(group, TABLE_WITH_NAME_COLUMN_RESOURCE_PROVIDER,
			tableConfig -> adaptColumnNameWithResourceProvider(tableConfig, false));
		addTable(group, TABLE_WITH_NAME_COLUMN_RENDERER,
			tableConfig -> adaptColumnNameWithRenderer(tableConfig, false));
		addTable(group, TABLE_WITH_NAME_COLUMN_CELL_RENDERER,
			tableConfig -> adaptColumnNameWithCellRenderer(tableConfig, false));
		parentGroup.addMember(group);
	}

	private void addTableCustomColumnFields(FormGroup parentGroup) {
		FormGroup group =
			new FormGroup(TABLE_WITH_CUSTOM_COLUMN_FIELDS, CUSTOM_TABLE_SELECT_DIALOG_CUSTOM_COLUMN_GROUP);
		addTable(group, TABLE_WITH_CUSTOM_COLUMN_RESOURCE_PROVIDER,
			tableConfig -> adaptCustomColumnWithResourceProvider(tableConfig, false));
		addTable(group, TABLE_WITH_CUSTOM_COLUMN_RENDERER,
			tableConfig -> adaptCustomColumnWithRenderer(tableConfig, false));
		addTable(group, TABLE_WITH_CUSTOM_COLUMN_CELL_RENDERER,
			tableConfig -> adaptCustomColumnWithCellRenderer(tableConfig, false));
		parentGroup.addMember(group);
	}

	private void addTreeNameColumnFields(FormGroup parentGroup) {
		FormGroup group = new FormGroup(TREE_WITH_NAME_COLUMN_FIELDS, CUSTOM_TREE_SELECT_DIALOG_NAME_COLUMN_GROUP);
		addTree(group, TREE_WITH_NAME_COLUMN_RESOURCE_PROVIDER,
			tableConfig -> adaptColumnNameWithResourceProvider(tableConfig, true));
		addTree(group, TREE_WITH_NAME_COLUMN_RENDERER,
			tableConfig -> adaptColumnNameWithRenderer(tableConfig, true));
		addTree(group, TREE_WITH_NAME_COLUMN_CELL_RENDERER,
			tableConfig -> adaptColumnNameWithCellRenderer(tableConfig, true));
		parentGroup.addMember(group);
	}

	private void addTreeCustomColumnFields(FormGroup parentGroup) {
		FormGroup group = new FormGroup(TREE_WITH_CUSTOM_COLUMN_FIELDS, CUSTOM_TREE_SELECT_DIALOG_CUSTOM_COLUMN_GROUP);
		addTree(group, TREE_WITH_CUSTOM_COLUMN_RESOURCE_PROVIDER,
			tableConfig -> adaptCustomColumnWithResourceProvider(tableConfig, true));
		addTree(group, TREE_WITH_CUSTOM_COLUMN_RENDERER,
			tableConfig -> adaptCustomColumnWithRenderer(tableConfig, true));
		addTree(group, TREE_WITH_CUSTOM_COLUMN_CELL_RENDERER,
			tableConfig -> adaptCustomColumnWithCellRenderer(tableConfig, true));
		parentGroup.addMember(group);
	}

	private void addTable(FormGroup parent, String name, Consumer<TableConfiguration> customTableProvider) {
		SelectField field = newSelectField(name, LIST_OPTIONS);
		initValueAndOptionsWithList(field);
		useTablePopupSelectDialog(field);
		adaptDialogTable(field, this::declareNameColumn);
		adaptDialogTable(field, customTableProvider);
		parent.addMember(field);
	}

	private void addTree(FormGroup parent, String name, Consumer<TableConfiguration> customTableProvider) {
		SelectField field = newSelectField(name, TREE_OPTIONS);
		initValueAndOptionsWithTree(field);
		useTablePopupSelectDialog(field);
		adaptDialogTable(field, this::declareNameColumn);
		adaptDialogTable(field, customTableProvider);
		parent.addMember(field);
	}

	private void initValueAndOptionsWithList(SelectField field) {
		field.initializeField(singletonList(LIST_OPTION_DEFAULT));
		field.setOptionComparator(newCustomComparator(LIST_OPTIONS));
	}

	private void initValueAndOptionsWithTree(SelectField field) {
		field.initializeField(singletonList(TREE_OPTION_DEFAULT));
		field.setOptionComparator(newCustomComparator(TREE_OPTIONS_AS_LIST));
	}

	private void useTablePopupSelectDialog(SelectField field) {
		field.setControlProvider(SelectionControlProvider.SELECTION_INSTANCE);
		field.setSelectDialogProvider(SelectDialogProvider.newTableInstance());
	}

	private void declareNameColumn(TableConfiguration table) {
		ColumnConfiguration column = table.declareColumn(NAME_COLUMN);
		column.setColumnLabelKey(TABLE_COLUMN_NAME_TITLE);
		column.setAccessor(IdentityAccessor.INSTANCE);
	}

	private void adaptDialogTable(SelectField field, Consumer<TableConfiguration> customTableProvider) {
		TableConfigurationProvider defaultTable = field.getDialogTableConfigurationProvider();
		TableConfigurationProvider customTable = new FunctionalTableConfigProvider(customTableProvider);
		field.setDialogTableConfigurationProvider(combine(defaultTable, customTable));
	}

	private void adaptColumnNameWithResourceProvider(TableConfiguration table, boolean isTree) {
		setCustomResourceProvider(table.getCol(NAME_COLUMN), isTree);
	}

	private void adaptColumnNameWithRenderer(TableConfiguration table, boolean isTree) {
		setCustomRenderer(table.getCol(NAME_COLUMN), isTree);
	}

	private void adaptColumnNameWithCellRenderer(TableConfiguration table, boolean isTree) {
		setCustomCellRenderer(table.getCol(NAME_COLUMN), isTree);
	}

	private void adaptCustomColumnWithResourceProvider(TableConfiguration table, boolean isTree) {
		setCustomResourceProvider(declareCustomColumn(table), isTree);
	}

	private void adaptCustomColumnWithRenderer(TableConfiguration table, boolean isTree) {
		setCustomRenderer(declareCustomColumn(table), isTree);
	}

	private void adaptCustomColumnWithCellRenderer(TableConfiguration table, boolean isTree) {
		setCustomCellRenderer(declareCustomColumn(table), isTree);
	}

	private void setCustomResourceProvider(ColumnConfiguration column, boolean isTree) {
		column.setResourceProvider(getResourceProvider(isTree));
	}

	private void setCustomRenderer(ColumnConfiguration column, boolean isTree) {
		column.setRenderer(newResourceRenderer(getResourceProvider(isTree)));
	}

	private void setCustomCellRenderer(ColumnConfiguration column, boolean isTree) {
		UniformCellRenderer.Config cellRendererConfig = newConfigItem(UniformCellRenderer.Config.class);
		ResourceRenderer<?> innerRenderer = newResourceRenderer(getResourceProvider(isTree));
		setProperty(cellRendererConfig, UniformCellRenderer.Config.RENDERER_NAME, innerRenderer);
		column.setCellRenderer(createInstance(cellRendererConfig));
	}

	private ResourceProvider getResourceProvider(boolean isTree) {
		if (isTree) {
			return newTLTreeNodeResourceProvider(DemoResourceProvider.INSTANCE);
		}
		return DemoResourceProvider.INSTANCE;
	}

	private ColumnConfiguration declareCustomColumn(TableConfiguration table) {
		ColumnConfiguration column = table.declareColumn(CUSTOM_COLUMN);
		column.setColumnLabelKey(TABLE_COLUMN_CUSTOM_TITLE);
		column.setAccessor(IdentityAccessor.INSTANCE);
		return column;
	}

	private String translate(ResKey resKey) {
		return Resources.getInstance().getString(resKey);
	}

}
