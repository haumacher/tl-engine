/*
 * SPDX-FileCopyrightText: 2001 (c) Business Operation Systems GmbH <info@top-logic.com>
 * 
 * SPDX-License-Identifier: AGPL-3.0-only OR LicenseRef-BOS-TopLogic-1.0
 */
package com.top_logic.knowledge.gui.layout.person;

import java.util.Map;

import com.top_logic.basic.config.InstantiationContext;
import com.top_logic.event.ModelTrackingService;
import com.top_logic.knowledge.wrap.person.Person;
import com.top_logic.knowledge.wrap.person.PersonManager;
import com.top_logic.layout.form.component.AbstractDeleteCommandHandler;
import com.top_logic.mig.html.layout.LayoutComponent;
import com.top_logic.tool.execution.CombinedExecutabilityRule;
import com.top_logic.tool.execution.ExecutabilityRule;
import com.top_logic.tool.execution.ExecutableState;
import com.top_logic.util.TLContext;

/**
 * Delete a person from the system.
 * 
 * @author     <a href="mailto:mga@top-logic.com">Michael G&auml;nsler</a>
 */
public class DeletePersonCommandHandler extends AbstractDeleteCommandHandler {

	public static final ExecutableState EXPLAIN_NO_SELF_DELETE =
		ExecutableState.createDisabledState(I18NConstants.ERROR_CANNOT_DELETE_SELF);

	public static final ExecutabilityRule DISALLOW_SELF_DELETE = new ExecutabilityRule() {
		@Override
		public ExecutableState isExecutable(LayoutComponent aComponent, Object model, Map<String, Object> someValues) {
			if (TLContext.getContext().getPerson() == model) {
				return EXPLAIN_NO_SELF_DELETE;
			}
			return ExecutableState.EXECUTABLE;
		}
	};

	public static final ExecutabilityRule DISALLOW_DELETE_LDAP_USER = new ExecutabilityRule() {
		@Override
		public ExecutableState isExecutable(LayoutComponent aComponent, Object model, Map<String, Object> someValues) {
			Person person = (Person) model;
			if (person == null) {
				return ExecutableState.NOT_EXEC_HIDDEN;
			}
			return ExecutableState.EXECUTABLE;
		}
	};

	/** ID of this handler. */
    public static final String COMMAND_ID = "deletePerson";

	public DeletePersonCommandHandler(InstantiationContext context, Config config) {
		super(context, config);
    }
    
    @Override
	protected void deleteObject(LayoutComponent component, Object model, Map<String, Object> arguments) {
		if (!(model instanceof Person)) {
			throw failCannotDelete();
        }

		Person thePerson = (Person) model;
		sendEvent(thePerson);
		this.deletePerson(thePerson);
    }

    /**
     * Delete the given person.
     * 
     * @param    aPerson             The person to be deleted, must not be <code>null</code>.
     */
    public void deletePerson(Person aPerson) {
        PersonManager.getManager().deleteUser(aPerson);
    }
    
    /**
     * Hook for subclasses. This method sends a MonitorEvent on the ModelTrackingService.
     * Overwrite this method if you want to deactivate or send special MonitorEvents.
     * Use this method if you want to generate MonitorEvents outside a GUI-Context.
     * MonitorEvents are generated by default. 
     * 
     * @param aPerson the deleted person (before KB commit)
     */
    protected void sendEvent(Person aPerson) {
       ModelTrackingService.sendDeleteEvent(aPerson, TLContext.getContext().getCurrentPersonWrapper());
    }
    
    @Override
	@Deprecated
	public ExecutabilityRule createExecutabilityRule() {
		return CombinedExecutabilityRule.combine(
			super.createExecutabilityRule(),
			DISALLOW_SELF_DELETE,
			DisallowRootDeleteRule.INSTANCE,
			DISALLOW_DELETE_LDAP_USER);
    }
}
