/*
 * SPDX-FileCopyrightText: 2015 (c) Business Operation Systems GmbH <info@top-logic.com>
 * 
 * SPDX-License-Identifier: AGPL-3.0-only OR LicenseRef-BOS-TopLogic-1.0
 */
package com.top_logic.basic.config;

import java.util.Arrays;

import com.top_logic.basic.ArrayUtil;
import com.top_logic.basic.tools.NameBuilder;

/**
 * A path of {@link PropertyDescriptor}s and the {@link ConfigurationDescriptor} at which the path
 * starts.
 * 
 * @author <a href="mailto:jst@top-logic.com">Jan Stolzenburg</a>
 */
public class PropertyPath {

	private final ConfigurationDescriptor _start;

	private final PropertyDescriptor[] _properties;

	/**
	 * Creates a {@link PropertyPath}.
	 * <p>
	 * The given array is copied to prevent side-effect changes through external changes of the
	 * given array.
	 * </p>
	 * 
	 * @param start
	 *        Is not allowed to be null.
	 * @param properties
	 *        Is not allowed to be null. Is not allowed to contain null.
	 */
	public PropertyPath(ConfigurationDescriptor start, PropertyDescriptor... properties) {
		checkNoNull(start, properties);
		_start = start;
		_properties = properties.clone();
	}

	private void checkNoNull(ConfigurationDescriptor start, PropertyDescriptor... properties) {
		if (start == null) {
			throw new NullPointerException();
		}
		if (properties == null) {
			throw new NullPointerException();
		}
		if (ArrayUtil.contains(properties, null)) {
			throw new NullPointerException();
		}
	}

	/**
	 * The {@link ConfigurationDescriptor} at which the path starts.
	 */
	public ConfigurationDescriptor getStart() {
		return _start;
	}

	/**
	 * The size of this path. Always >=0.
	 */
	public int size() {
		return _properties.length;
	}

	/**
	 * Index has to be >=0 and < size().
	 * 
	 * @return Never null.
	 */
	public PropertyDescriptor get(int index) {
		return _properties[index];
	}

	/**
	 * A new copy of the internally used array. Never null. Never contains null.
	 */
	public PropertyDescriptor[] toArray() {
		return _properties.clone();
	}

	/**
	 * Generated by Eclipse
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + Arrays.hashCode(_properties);
		result = prime * result + ((_start == null) ? 0 : _start.hashCode());
		return result;
	}

	/**
	 * Generated by Eclipse
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		PropertyPath other = (PropertyPath) obj;
		if (!Arrays.equals(_properties, other._properties)) {
			return false;
		}
		if (_start == null) {
			if (other._start != null) {
				return false;
			}
		} else if (!_start.equals(other._start)) {
			return false;
		}
		return true;
	}

	@Override
	public String toString() {
		return new NameBuilder(this)
			.add("start", _start.getConfigurationInterface())
			.add("names", Arrays.toString(_properties))
			.buildName();
	}

}
