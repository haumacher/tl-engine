/* Generated By:JavaCC: Do not edit this line. ConfigTemplateParser.java */
package com.top_logic.basic.config.template.parser;

import java.util.List;

import com.top_logic.basic.config.template.ExprFactory;
import com.top_logic.basic.config.template.ExprFactory.TemplateBuilder;
import com.top_logic.basic.config.template.TemplateExpression;
import com.top_logic.basic.config.template.TemplateExpression.ConfigExpression;
import com.top_logic.basic.config.template.TemplateExpression.Tag;

/**
 * Parser that builds an {@link TemplateExpression} tree from its textual representation.
 * 
 * @author <a href="mailto:bhu@top-logic.com">Bernhard Haumacher</a>
 */
@SuppressWarnings({ "javadoc", "unused", "synthetic-access" })
public class ConfigTemplateParser implements ConfigTemplateParserConstants {

  final public TemplateExpression template() throws ParseException {
  TemplateBuilder builder = ExprFactory.builder();
  TemplateExpression embedded;
  Token t;
  Tag start;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TAG_START:
      case END_TAG_START:
      case STARTEXPR:
      case LITERAL:
      case STARTEXPR_D:
      case LITERAL_D:
      case STARTEXPR_S:
      case LITERAL_S:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LITERAL:
      case LITERAL_D:
      case LITERAL_S:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LITERAL:
          t = jj_consume_token(LITERAL);
          break;
        case LITERAL_D:
          t = jj_consume_token(LITERAL_D);
          break;
        case LITERAL_S:
          t = jj_consume_token(LITERAL_S);
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      builder.append(ExprFactory.literalText(t));
        break;
      case STARTEXPR:
        jj_consume_token(STARTEXPR);
        embedded = expressionContents();
      builder.append(embedded);
        jj_consume_token(ENDEXPR);
      token_source.SwitchTo(DEFAULT);
        break;
      case STARTEXPR_D:
        jj_consume_token(STARTEXPR_D);
        embedded = expressionContents();
      builder.append(embedded);
        jj_consume_token(ENDEXPR);
      token_source.SwitchTo(AttributeValueD);
        break;
      case STARTEXPR_S:
        jj_consume_token(STARTEXPR_S);
        embedded = expressionContents();
      builder.append(embedded);
        jj_consume_token(ENDEXPR);
      token_source.SwitchTo(AttributeValueS);
        break;
      case TAG_START:
        start = startTag();
      builder.startTag(start);
        break;
      case END_TAG_START:
        t = jj_consume_token(END_TAG_START);
        jj_consume_token(TAG_END);
      builder.endTag(t);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return builder.build();}
    throw new Error("Missing return statement in function");
  }

  final public Tag startTag() throws ParseException {
  Token t;
  boolean empty;
  Tag result;
    t = jj_consume_token(TAG_START);
    result = ExprFactory.startTag(t);
    attributes(result);
    empty = tagEnd();
    result.setEmpty(empty);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public void attributes(Tag tag) throws ParseException {
  Token n;
  TemplateExpression value;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XML_NAME:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      n = jj_consume_token(XML_NAME);
      jj_consume_token(EQ);
      value = attrValue();
      ExprFactory.setAttribute(tag, n, value);
    }
  }

  final public TemplateExpression attrValue() throws ParseException {
  TemplateExpression result;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DQUOT:
      jj_consume_token(DQUOT);
      result = template();
      jj_consume_token(DQUOT_END);
      break;
    case SQUOT:
      jj_consume_token(SQUOT);
      result = template();
      jj_consume_token(SQUOT_END);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public boolean tagEnd() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TAG_END:
      jj_consume_token(TAG_END);
      {if (true) return false;}
      break;
    case EMPTY_TAG_END:
      jj_consume_token(EMPTY_TAG_END);
      {if (true) return true;}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public TemplateExpression expressionContents() throws ParseException {
  Token t;
  ConfigExpression name;
  TemplateExpression expr;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ARROW:
      t = jj_consume_token(ARROW);
      name = accessExpression();
    expr = ExprFactory.reference(t, name);
      break;
    case STARTTEMPLATE:
    case FOREACH:
    case THIS:
    case IDENTIFIER:
    case VARNAME:
    case FUNNAME:
    case STRING:
    case NUMBER:
      expr = expression();
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public TemplateExpression expression() throws ParseException {
  TemplateExpression expr;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STARTTEMPLATE:
      expr = embeddedTemplate();
      break;
    case THIS:
    case IDENTIFIER:
    case VARNAME:
    case FUNNAME:
    case STRING:
    case NUMBER:
      expr = choiceExpression();
      break;
    case FOREACH:
      expr = foreach();
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public TemplateExpression choiceExpression() throws ParseException {
  TemplateExpression expr;
  TemplateExpression positive, negative = null;
  TemplateExpression alternative;
    expr = accessExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QUESTIONMARK:
      jj_consume_token(QUESTIONMARK);
      positive = expression();
      if (jj_2_1(2147483647)) {
        jj_consume_token(COLON);
        negative = expression();
      } else {
        ;
      }
      expr = ExprFactory.choice(expr, positive, negative);
      break;
    default:
      jj_la1[8] = jj_gen;
      label_3:
      while (true) {
        if (jj_2_2(2147483647)) {
          ;
        } else {
          break label_3;
        }
        jj_consume_token(PIPE);
        alternative = expressionContents();
        expr = ExprFactory.alternative(expr, alternative);
      }
    }
    {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public TemplateExpression embeddedTemplate() throws ParseException {
  TemplateExpression expr;
    jj_consume_token(STARTTEMPLATE);
    expr = template();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ENDTEMPLATE:
      jj_consume_token(ENDTEMPLATE);
      break;
    case ENDTEMPLATE_D:
      jj_consume_token(ENDTEMPLATE_D);
      break;
    case ENDTEMPLATE_S:
      jj_consume_token(ENDTEMPLATE_S);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public ConfigExpression accessExpression() throws ParseException {
  ConfigExpression expr;
  Token t;
  Token selector;
  ConfigExpression index;
    expr = atomicExpression();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
      case OPENBRACE:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        jj_consume_token(DOT);
        selector = jj_consume_token(IDENTIFIER);
      expr = ExprFactory.propertyAccess(expr, selector);
        break;
      case OPENBRACE:
        jj_consume_token(OPENBRACE);
        index = accessExpression();
        t = jj_consume_token(CLOSEBRACE);
      expr = ExprFactory.collectionAccess(expr, index, t);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public ConfigExpression atomicExpression() throws ParseException {
  ConfigExpression expr;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      expr = property();
      break;
    case STRING:
    case NUMBER:
      expr = literal();
      break;
    case THIS:
      expr = self();
      break;
    case VARNAME:
      expr = variable();
      break;
    case FUNNAME:
      expr = function();
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public ConfigExpression property() throws ParseException {
  Token id;
    id = jj_consume_token(IDENTIFIER);
    {if (true) return ExprFactory.propertyAccess(id);}
    throw new Error("Missing return statement in function");
  }

  final public ConfigExpression literal() throws ParseException {
  Token str, num;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      str = jj_consume_token(STRING);
      {if (true) return ExprFactory.stringLiteral(str);}
      break;
    case NUMBER:
      num = jj_consume_token(NUMBER);
      {if (true) return ExprFactory.numberLiteral(num);}
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public TemplateExpression foreach() throws ParseException {
  Token open, close;
  Token local = null;
  TemplateExpression collection, iterator = null, separator = null, start = null, stop = null;
    open = jj_consume_token(FOREACH);
    jj_consume_token(OPENPAREN);
    if (jj_2_3(2)) {
      local = jj_consume_token(IDENTIFIER);
      jj_consume_token(COLON);
    } else {
      ;
    }
    collection = expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      separator = expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        iterator = expression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
          start = expression();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            jj_consume_token(COMMA);
            stop = expression();
            break;
          default:
            jj_la1[14] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[15] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    close = jj_consume_token(CLOSEPAREN);
    {if (true) return ExprFactory.foreach(open, local == null ? null : local, collection, separator, iterator, start, stop, close);}
    throw new Error("Missing return statement in function");
  }

  final public ConfigExpression self() throws ParseException {
  Token t;
    t = jj_consume_token(THIS);
    {if (true) return ExprFactory.self(t);}
    throw new Error("Missing return statement in function");
  }

  final public ConfigExpression variable() throws ParseException {
  Token name;
    name = jj_consume_token(VARNAME);
    {if (true) return ExprFactory.variable(name);}
    throw new Error("Missing return statement in function");
  }

  final public ConfigExpression function() throws ParseException {
  Token name;
  Token end;
  ConfigExpression arg;
  List<ConfigExpression> args = ExprFactory.expressions();
    name = jj_consume_token(FUNNAME);
   end = name;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPENPAREN:
      jj_consume_token(OPENPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case THIS:
      case IDENTIFIER:
      case VARNAME:
      case FUNNAME:
      case STRING:
      case NUMBER:
        arg = accessExpression();
            args.add(arg);
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[18] = jj_gen;
            break label_5;
          }
          jj_consume_token(COMMA);
          arg = accessExpression();
              args.add(arg);
        }
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      end = jj_consume_token(CLOSEPAREN);
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    {if (true) return ExprFactory.function(name, args, end);}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_3_2() {
    if (jj_scan_token(PIPE)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ConfigTemplateParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[21];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2a8002e,0x2200020,0x2a8002e,0x400,0x3000,0xc000,0x80000000,0x80000000,0x0,0x1100010,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x87f,0x7f,0x200,0x0,0x1080,0x1080,0x7e,0x60,0x10000,0x10000,0x10000,0x10000,0x10000,0x7e,0x4000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[3];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ConfigTemplateParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ConfigTemplateParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ConfigTemplateParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ConfigTemplateParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ConfigTemplateParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ConfigTemplateParser(ConfigTemplateParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ConfigTemplateParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

	private java.util.List<int[]> jj_expentries = new java.util.ArrayList<>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[52];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 21; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 52; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 3; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
