/*
 * SPDX-FileCopyrightText: 2024 (c) Business Operation Systems GmbH <info@top-logic.com>
 * 
 * SPDX-License-Identifier: AGPL-3.0-only OR LicenseRef-BOS-TopLogic-1.0
 */
package com.top_logic.demo.model.dnd;

/**
 * Factory for <code>test.dnd</code> objects.
 * 
 * <p>
 * Note: this is generated code. Do not modify. Instead, create a subclass and register this in the module system.
 * </p>
 * 
 * @author Automatically generated by {@link com.top_logic.element.model.generate.FactoryGenerator}
 */
public class TestDndFactory extends com.top_logic.element.structured.wrap.StructuredElementWrapperFactory {

	/**
	 * Name of singleton {@link #TEST_DND_STRUCTURE}.
	 */
	public static final String SINGLETON_ROOT = "ROOT";

	/**
	 * Name of singleton {@link #TEST_DND_STRUCTURE}.
	 */
	public static final String SINGLETON_LIBRARY = "LIBRARY";

	/**
	 * Name of the structure <code>test.dnd</code> defined by {@link TestDndFactory}.
	 */
	public static final String TEST_DND_STRUCTURE = "test.dnd";

	/**
	 * Lookup {@link Library} type.
	 */
	public static com.top_logic.model.TLClass getLibraryType() {
		return (com.top_logic.model.TLClass) com.top_logic.util.model.ModelService.getApplicationModel().getModule(TEST_DND_STRUCTURE).getType(Library.LIBRARY_TYPE);
	}

	/**
	 * Lookup {@link Library#ELEMENTS_ATTR} of {@link Library}.
	 */
	public static com.top_logic.model.TLReference getElementsLibraryAttr() {
		return (com.top_logic.model.TLReference) getLibraryType().getPart(Library.ELEMENTS_ATTR);
	}

	/**
	 * Lookup {@link Library#NAME_ATTR} of {@link Library}.
	 */
	public static com.top_logic.model.TLProperty getNameLibraryAttr() {
		return (com.top_logic.model.TLProperty) getLibraryType().getPart(Library.NAME_ATTR);
	}

	/**
	 * Lookup {@link NamedPlanElement} type.
	 */
	public static com.top_logic.model.TLClass getNamedPlanElementType() {
		return (com.top_logic.model.TLClass) com.top_logic.util.model.ModelService.getApplicationModel().getModule(TEST_DND_STRUCTURE).getType(NamedPlanElement.NAMED_PLAN_ELEMENT_TYPE);
	}

	/**
	 * Lookup {@link NamedPlanElement#NAME_ATTR} of {@link NamedPlanElement}.
	 */
	public static com.top_logic.model.TLProperty getNameNamedPlanElementAttr() {
		return (com.top_logic.model.TLProperty) getNamedPlanElementType().getPart(NamedPlanElement.NAME_ATTR);
	}

	/**
	 * Lookup {@link Entry} type.
	 */
	public static com.top_logic.model.TLClass getEntryType() {
		return (com.top_logic.model.TLClass) com.top_logic.util.model.ModelService.getApplicationModel().getModule(TEST_DND_STRUCTURE).getType(Entry.ENTRY_TYPE);
	}

	/**
	 * Lookup {@link Factory} type.
	 */
	public static com.top_logic.model.TLClass getFactoryType() {
		return (com.top_logic.model.TLClass) com.top_logic.util.model.ModelService.getApplicationModel().getModule(TEST_DND_STRUCTURE).getType(Factory.FACTORY_TYPE);
	}

	/**
	 * Lookup {@link Factory#FLOORS_ATTR} of {@link Factory}.
	 */
	public static com.top_logic.model.TLReference getFloorsFactoryAttr() {
		return (com.top_logic.model.TLReference) getFactoryType().getPart(Factory.FLOORS_ATTR);
	}

	/**
	 * Lookup {@link Floor} type.
	 */
	public static com.top_logic.model.TLClass getFloorType() {
		return (com.top_logic.model.TLClass) com.top_logic.util.model.ModelService.getApplicationModel().getModule(TEST_DND_STRUCTURE).getType(Floor.FLOOR_TYPE);
	}

	/**
	 * Lookup {@link Floor#LOCATIONS_ATTR} of {@link Floor}.
	 */
	public static com.top_logic.model.TLReference getLocationsFloorAttr() {
		return (com.top_logic.model.TLReference) getFloorType().getPart(Floor.LOCATIONS_ATTR);
	}

	/**
	 * Lookup {@link Location} type.
	 */
	public static com.top_logic.model.TLClass getLocationType() {
		return (com.top_logic.model.TLClass) com.top_logic.util.model.ModelService.getApplicationModel().getModule(TEST_DND_STRUCTURE).getType(Location.LOCATION_TYPE);
	}

	/**
	 * Lookup {@link Location#ENTRY_ATTR} of {@link Location}.
	 */
	public static com.top_logic.model.TLReference getEntryLocationAttr() {
		return (com.top_logic.model.TLReference) getLocationType().getPart(Location.ENTRY_ATTR);
	}

	/**
	 * Lookup {@link Machine} type.
	 */
	public static com.top_logic.model.TLClass getMachineType() {
		return (com.top_logic.model.TLClass) com.top_logic.util.model.ModelService.getApplicationModel().getModule(TEST_DND_STRUCTURE).getType(Machine.MACHINE_TYPE);
	}

	/**
	 * Lookup {@link Machine#LOCATION_ATTR} of {@link Machine}.
	 */
	public static com.top_logic.model.TLReference getLocationMachineAttr() {
		return (com.top_logic.model.TLReference) getMachineType().getPart(Machine.LOCATION_ATTR);
	}

	/**
	 * Lookup {@link Root} type.
	 */
	public static com.top_logic.model.TLClass getRootType() {
		return (com.top_logic.model.TLClass) com.top_logic.util.model.ModelService.getApplicationModel().getModule(TEST_DND_STRUCTURE).getType(Root.ROOT_TYPE);
	}

	/**
	 * Lookup {@link Root#FACTORIES_ATTR} of {@link Root}.
	 */
	public static com.top_logic.model.TLReference getFactoriesRootAttr() {
		return (com.top_logic.model.TLReference) getRootType().getPart(Root.FACTORIES_ATTR);
	}

	/**
	 * Lookup {@link Root#NAME_ATTR} of {@link Root}.
	 */
	public static com.top_logic.model.TLProperty getNameRootAttr() {
		return (com.top_logic.model.TLProperty) getRootType().getPart(Root.NAME_ATTR);
	}

	/**
	 * Name of type <code>Library</code> in structure {@link #TEST_DND_STRUCTURE}.
	 * 
	 * @deprecated Use {@link Library#LIBRARY_TYPE}.
	 */
	@Deprecated
	public static final String LIBRARY_NODE = Library.LIBRARY_TYPE;

	/**
	 * Storage table name of {@link #LIBRARY_NODE} objects.
	 */
	public static final String KO_NAME_LIBRARY = "GenericObject";

	/**
	 * Name of type <code>NamedPlanElement</code> in structure {@link #TEST_DND_STRUCTURE}.
	 * 
	 * @deprecated Use {@link NamedPlanElement#NAMED_PLAN_ELEMENT_TYPE}.
	 */
	@Deprecated
	public static final String NAMED_PLAN_ELEMENT_NODE = NamedPlanElement.NAMED_PLAN_ELEMENT_TYPE;

	/**
	 * Name of type <code>Entry</code> in structure {@link #TEST_DND_STRUCTURE}.
	 * 
	 * @deprecated Use {@link Entry#ENTRY_TYPE}.
	 */
	@Deprecated
	public static final String ENTRY_NODE = Entry.ENTRY_TYPE;

	/**
	 * Storage table name of {@link #ENTRY_NODE} objects.
	 */
	public static final String KO_NAME_ENTRY = "GenericObject";

	/**
	 * Name of type <code>Factory</code> in structure {@link #TEST_DND_STRUCTURE}.
	 * 
	 * @deprecated Use {@link Factory#FACTORY_TYPE}.
	 */
	@Deprecated
	public static final String FACTORY_NODE = Factory.FACTORY_TYPE;

	/**
	 * Storage table name of {@link #FACTORY_NODE} objects.
	 */
	public static final String KO_NAME_FACTORY = "GenericObject";

	/**
	 * Name of type <code>Floor</code> in structure {@link #TEST_DND_STRUCTURE}.
	 * 
	 * @deprecated Use {@link Floor#FLOOR_TYPE}.
	 */
	@Deprecated
	public static final String FLOOR_NODE = Floor.FLOOR_TYPE;

	/**
	 * Storage table name of {@link #FLOOR_NODE} objects.
	 */
	public static final String KO_NAME_FLOOR = "GenericObject";

	/**
	 * Name of type <code>Location</code> in structure {@link #TEST_DND_STRUCTURE}.
	 * 
	 * @deprecated Use {@link Location#LOCATION_TYPE}.
	 */
	@Deprecated
	public static final String LOCATION_NODE = Location.LOCATION_TYPE;

	/**
	 * Storage table name of {@link #LOCATION_NODE} objects.
	 */
	public static final String KO_NAME_LOCATION = "GenericObject";

	/**
	 * Name of type <code>Machine</code> in structure {@link #TEST_DND_STRUCTURE}.
	 * 
	 * @deprecated Use {@link Machine#MACHINE_TYPE}.
	 */
	@Deprecated
	public static final String MACHINE_NODE = Machine.MACHINE_TYPE;

	/**
	 * Storage table name of {@link #MACHINE_NODE} objects.
	 */
	public static final String KO_NAME_MACHINE = "GenericObject";

	/**
	 * Name of type <code>Root</code> in structure {@link #TEST_DND_STRUCTURE}.
	 * 
	 * @deprecated Use {@link Root#ROOT_TYPE}.
	 */
	@Deprecated
	public static final String ROOT_NODE = Root.ROOT_TYPE;

	/**
	 * Storage table name of {@link #ROOT_NODE} objects.
	 */
	public static final String KO_NAME_ROOT = "GenericObject";

	/**
	 * Singleton <code>ROOT</code>.
	 */
	public Root getRootSingleton() {
		return (Root) lookupSingleton(SINGLETON_ROOT);
	}

	/**
	 * Singleton <code>ROOT</code> on given branch.
	 */
	public Root getRootSingleton(com.top_logic.knowledge.service.Branch requestedBranch) {
		return (Root) lookupSingleton(SINGLETON_ROOT, requestedBranch);
	}

	/**
	 * Singleton <code>ROOT</code> on given branch in given revision.
	 */
	public Root getRootSingleton(com.top_logic.knowledge.service.Branch requestedBranch, com.top_logic.knowledge.service.Revision historyContext) {
		return (Root) lookupSingleton(SINGLETON_ROOT, requestedBranch, historyContext);
	}

	/**
	 * Singleton <code>LIBRARY</code>.
	 */
	public Library getLibrarySingleton() {
		return (Library) lookupSingleton(SINGLETON_LIBRARY);
	}

	/**
	 * Singleton <code>LIBRARY</code> on given branch.
	 */
	public Library getLibrarySingleton(com.top_logic.knowledge.service.Branch requestedBranch) {
		return (Library) lookupSingleton(SINGLETON_LIBRARY, requestedBranch);
	}

	/**
	 * Singleton <code>LIBRARY</code> on given branch in given revision.
	 */
	public Library getLibrarySingleton(com.top_logic.knowledge.service.Branch requestedBranch, com.top_logic.knowledge.service.Revision historyContext) {
		return (Library) lookupSingleton(SINGLETON_LIBRARY, requestedBranch, historyContext);
	}


	/**
	 * Create an instance of {@link Library} type.
	 */
	public final Library createLibrary(com.top_logic.model.TLObject context) {
		return (Library) createObject(getLibraryType(), context);
	}

	/**
	 * Create an instance of {@link Library} type.
	 */
	public final Library createLibrary() {
		return createLibrary(null);
	}

	/**
	 * Create an instance of {@link Entry} type.
	 */
	public final Entry createEntry(com.top_logic.model.TLObject context) {
		return (Entry) createObject(getEntryType(), context);
	}

	/**
	 * Create an instance of {@link Entry} type.
	 */
	public final Entry createEntry() {
		return createEntry(null);
	}

	/**
	 * Create an instance of {@link Factory} type.
	 */
	public final Factory createFactory(com.top_logic.model.TLObject context) {
		return (Factory) createObject(getFactoryType(), context);
	}

	/**
	 * Create an instance of {@link Factory} type.
	 */
	public final Factory createFactory() {
		return createFactory(null);
	}

	/**
	 * Create an instance of {@link Floor} type.
	 */
	public final Floor createFloor(com.top_logic.model.TLObject context) {
		return (Floor) createObject(getFloorType(), context);
	}

	/**
	 * Create an instance of {@link Floor} type.
	 */
	public final Floor createFloor() {
		return createFloor(null);
	}

	/**
	 * Create an instance of {@link Location} type.
	 */
	public final Location createLocation(com.top_logic.model.TLObject context) {
		return (Location) createObject(getLocationType(), context);
	}

	/**
	 * Create an instance of {@link Location} type.
	 */
	public final Location createLocation() {
		return createLocation(null);
	}

	/**
	 * Create an instance of {@link Machine} type.
	 */
	public final Machine createMachine(com.top_logic.model.TLObject context) {
		return (Machine) createObject(getMachineType(), context);
	}

	/**
	 * Create an instance of {@link Machine} type.
	 */
	public final Machine createMachine() {
		return createMachine(null);
	}

	/**
	 * Create an instance of {@link Root} type.
	 */
	public final Root createRoot(com.top_logic.model.TLObject context) {
		return (Root) createObject(getRootType(), context);
	}

	/**
	 * Create an instance of {@link Root} type.
	 */
	public final Root createRoot() {
		return createRoot(null);
	}

	/**
	 * The singleton instance of {@link TestDndFactory}.
	 */
	public static TestDndFactory getInstance() {
		return (TestDndFactory) com.top_logic.element.model.DynamicModelService.getFactoryFor(TEST_DND_STRUCTURE);
	}
}
