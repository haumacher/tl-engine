com.top_logic.migrate.tl_580.ConcreteTypeComputation = Concrete type computation
com.top_logic.migrate.tl_580.ConcreteTypeComputation.Config.type-attribute = Type attribute
com.top_logic.migrate.tl_580.ConcreteTypeComputation.Config.type-attribute.tooltip = Name of the attribute holding the type of an <i>object</i>.
com.top_logic.migrate.tl_580.ConcreteTypeComputation.tooltip = Rewriter to resolve the concrete object type for a <i>structured element</i> from the 5.7. attribute values.
com.top_logic.migrate.tl_580.MetaElementGlobalizer = Meta element globalizer
com.top_logic.migrate.tl_580.MetaElementGlobalizer.Config.meta-elements = Meta elements
com.top_logic.migrate.tl_580.MetaElementGlobalizer.Config.meta-elements.tooltip = The name of the meta element which must be global.
com.top_logic.migrate.tl_580.MetaElementGlobalizer.tooltip = Rewriter that sets the <code>"scope"</code> of global <i>business object types</i> to the module. This is needed to change <i>business object types</i> which are defined in the root element in 5.7.
com.top_logic.migrate.tl_580.SetStaticAsDynamicType = Set static as dynamic type
com.top_logic.migrate.tl_580.SetStaticAsDynamicType.tooltip = <i>Event rewriter proxy</i> setting the static type of an dynamic object also as dynamic type.
com.top_logic.migrate.tl_580.SetTLModule = Set module
com.top_logic.migrate.tl_580.SetTLModule.Config.no-module-assignment = No module assignment
com.top_logic.migrate.tl_580.SetTLModule.Config.no-module-assignment.tooltip = The classes for which no module assignment must be occurred. <p> This allows to configure type names which exists in more than one module. For such types the migration would fail. </p>
com.top_logic.migrate.tl_580.SetTLModule.tooltip = Rewriter that installs creates event to create <i>modules</i>.
