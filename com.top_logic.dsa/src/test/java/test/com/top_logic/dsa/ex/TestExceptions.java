/*
 * SPDX-FileCopyrightText: 2006 (c) Business Operation Systems GmbH <info@top-logic.com>
 * 
 * SPDX-License-Identifier: AGPL-3.0-only OR LicenseRef-BOS-TopLogic-1.0
 */
package test.com.top_logic.dsa.ex;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;

import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;

import test.com.top_logic.dsa.DSATestSetup;

import com.top_logic.basic.Logger;
import com.top_logic.basic.io.FileUtilities;
import com.top_logic.dsa.DatabaseAccessException;
import com.top_logic.dsa.evt.DataChangeEvent;
import com.top_logic.dsa.evt.DataChangeListener;
import com.top_logic.dsa.ex.DataChangeException;
import com.top_logic.dsa.ex.DataSecurityException;
import com.top_logic.dsa.file.FilesystemDataSourceAdaptor;

/**
 * Shows and tets the Usage of Exceptions.
 * 
 * @author    <a href=mailto:kha@top-logic.com>Klaus Halfmann</a>
 */
public class TestExceptions extends TestCase {

    /** DemoData used for Streamning */
    public static final byte DATA[] = 
		("This is some Data generated by " + TestExceptions.class.getName()).getBytes();

	@Override
	protected void setUp() throws Exception {
		super.setUp();
		File dir = new File("tmp/FDSA");
		assertTrue("Unable to create directory " + dir, dir.mkdir());
	}

	@Override
	protected void tearDown() throws Exception {
		FileUtilities.deleteR(new File("tmp/FDSA"));
		super.tearDown();
	}

	/**
	 * Main testcase for now.
	 */
    public void testDataCreated() throws DatabaseAccessException, IOException {
		FilesystemDataSourceAdaptor fdsa = new FilesystemDataSourceAdaptor("./tmp/FDSA");
        fdsa.setProtocol("t");
        TestedListener tli = new TestedListener();
        
        assertTrue (fdsa.addDataChangeListener(tli));
        assertFalse(fdsa.addDataChangeListener(tli));
        
        tli.throwMe = new DataSecurityException("I dont like you, go away");
        
        try {
            fdsa.createEntry("", "anEntry", getInputStream());
            fail("Expected DataSecurityException");
        } catch (DataSecurityException expected) {
            assertSame(tli.throwMe, expected);
        }

        tli.throwMe = new DataSecurityException("Evil null ahead", new NullPointerException());
        
        try {
            fdsa.createEntry("", "anEntry", getInputStream());
            fail("Expected DataSecurityException");
        } catch (DataSecurityException expected) {
            assertSame(tli.throwMe, expected);
        }

        
        assertTrue (fdsa.removeDataChangeListener(tli));
        assertFalse(fdsa.removeDataChangeListener(tli));

    }
    
    // inner class for Testing
    
    /**
     * Subclass of AbstractDataChangeListener for testing.
     */
    static class TestedListener implements DataChangeListener {

        /** Execption to throw for Testing */
        DataChangeException throwMe;
        
        /**
         * Nothing is done here
         */
        @Override
		public void dataChanged (DataChangeEvent anEvent) {
            // nothing done here
        }

        /**
         * Throw the DataChangeException for testing.
         */
        @Override
		public void checkChangeAllow (DataChangeEvent anEvent) 
                                                    throws DataChangeException {
            throw throwMe;
        }
    }

    
    /** Create an InputStream with some demo-Data */
    protected InputStream getInputStream() {
        return new ByteArrayInputStream(DATA);
    }

    /** Return the suite of Tests to perform */
    public static Test suite () {
        Test suite = new TestSuite (TestExceptions.class);
        // Test suite = new TestMimeTypes("testTypes");
        return DSATestSetup.createDSATestSetup(suite);
    }

    /** Main function for direct execution */
    public static void main (String[] args) {
        Logger.configureStdout();
        
        junit.textui.TestRunner.run (suite ());
    }

}
