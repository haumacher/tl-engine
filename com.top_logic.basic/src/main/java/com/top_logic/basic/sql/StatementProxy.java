/*
 * SPDX-FileCopyrightText: 2012 (c) Business Operation Systems GmbH <info@top-logic.com>
 * 
 * SPDX-License-Identifier: AGPL-3.0-only OR LicenseRef-BOS-TopLogic-1.0
 */
package com.top_logic.basic.sql;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;


/**
 * Abstract proxy for {@link Statement}.
 * 
 * @see #impl()
 * 
 * @author Automatically generated by <code>com.top_logic.basic.generate.ProxyGenerator</code>
 */
public abstract class StatementProxy implements Statement{

	/**
	 * The underlying implementation.
	 */
	protected abstract Statement impl();

	@Override
	public void close() throws SQLException {
		impl().close();
	}

	@Override
	public boolean execute(String a1, int a2) throws SQLException {
		return impl().execute(a1, a2);
	}

	@Override
	public boolean execute(String a1, String[] a2) throws SQLException {
		return impl().execute(a1, a2);
	}

	@Override
	public boolean execute(String a1, int[] a2) throws SQLException {
		return impl().execute(a1, a2);
	}

	@Override
	public boolean execute(String a1) throws SQLException {
		return impl().execute(a1);
	}

	@Override
	public void addBatch(String a1) throws SQLException {
		impl().addBatch(a1);
	}

	@Override
	public void cancel() throws SQLException {
		impl().cancel();
	}

	@Override
	public void clearBatch() throws SQLException {
		impl().clearBatch();
	}

	@Override
	public void clearWarnings() throws SQLException {
		impl().clearWarnings();
	}

	@Override
	public int[] executeBatch() throws SQLException {
		return impl().executeBatch();
	}

	@Override
	public ResultSet executeQuery(String a1) throws SQLException {
		return impl().executeQuery(a1);
	}

	@Override
	public int executeUpdate(String a1, int[] a2) throws SQLException {
		return impl().executeUpdate(a1, a2);
	}

	@Override
	public int executeUpdate(String a1) throws SQLException {
		return impl().executeUpdate(a1);
	}

	@Override
	public int executeUpdate(String a1, int a2) throws SQLException {
		return impl().executeUpdate(a1, a2);
	}

	@Override
	public int executeUpdate(String a1, String[] a2) throws SQLException {
		return impl().executeUpdate(a1, a2);
	}

	@Override
	public Connection getConnection() throws SQLException {
		return impl().getConnection();
	}

	@Override
	public int getFetchDirection() throws SQLException {
		return impl().getFetchDirection();
	}

	@Override
	public int getFetchSize() throws SQLException {
		return impl().getFetchSize();
	}

	@Override
	public ResultSet getGeneratedKeys() throws SQLException {
		return impl().getGeneratedKeys();
	}

	@Override
	public int getMaxFieldSize() throws SQLException {
		return impl().getMaxFieldSize();
	}

	@Override
	public int getMaxRows() throws SQLException {
		return impl().getMaxRows();
	}

	@Override
	public boolean getMoreResults(int a1) throws SQLException {
		return impl().getMoreResults(a1);
	}

	@Override
	public boolean getMoreResults() throws SQLException {
		return impl().getMoreResults();
	}

	@Override
	public int getQueryTimeout() throws SQLException {
		return impl().getQueryTimeout();
	}

	@Override
	public ResultSet getResultSet() throws SQLException {
		return impl().getResultSet();
	}

	@Override
	public int getResultSetConcurrency() throws SQLException {
		return impl().getResultSetConcurrency();
	}

	@Override
	public int getResultSetHoldability() throws SQLException {
		return impl().getResultSetHoldability();
	}

	@Override
	public int getResultSetType() throws SQLException {
		return impl().getResultSetType();
	}

	@Override
	public int getUpdateCount() throws SQLException {
		return impl().getUpdateCount();
	}

	@Override
	public SQLWarning getWarnings() throws SQLException {
		return impl().getWarnings();
	}

	@Override
	public boolean isClosed() throws SQLException {
		return impl().isClosed();
	}

	@Override
	public boolean isPoolable() throws SQLException {
		return impl().isPoolable();
	}

	@Override
	public void setCursorName(String a1) throws SQLException {
		impl().setCursorName(a1);
	}

	@Override
	public void setEscapeProcessing(boolean a1) throws SQLException {
		impl().setEscapeProcessing(a1);
	}

	@Override
	public void setFetchDirection(int a1) throws SQLException {
		impl().setFetchDirection(a1);
	}

	@Override
	public void setFetchSize(int a1) throws SQLException {
		impl().setFetchSize(a1);
	}

	@Override
	public void setMaxFieldSize(int a1) throws SQLException {
		impl().setMaxFieldSize(a1);
	}

	@Override
	public void setMaxRows(int a1) throws SQLException {
		impl().setMaxRows(a1);
	}

	@Override
	public void setPoolable(boolean a1) throws SQLException {
		impl().setPoolable(a1);
	}

	@Override
	public void setQueryTimeout(int a1) throws SQLException {
		impl().setQueryTimeout(a1);
	}

	@Override
	public boolean isWrapperFor(Class<?> a1) throws SQLException {
		return impl().isWrapperFor(a1);
	}

	@Override
	public <T> T unwrap(Class<T> a1) throws SQLException {
		return impl().unwrap(a1);
	}

	@Override
	public void closeOnCompletion() throws SQLException {
		impl().closeOnCompletion();
	}

	@Override
	public boolean isCloseOnCompletion() throws SQLException {
		return impl().isCloseOnCompletion();
	}

}
