/*
 * SPDX-FileCopyrightText: 2001 (c) Business Operation Systems GmbH <info@top-logic.com>
 * 
 * SPDX-License-Identifier: AGPL-3.0-only OR LicenseRef-BOS-TopLogic-1.0
 */
package com.top_logic.element.layout.structured;

import java.util.Map;

import com.top_logic.base.bus.MonitorEvent;
import com.top_logic.basic.config.InstantiationContext;
import com.top_logic.element.core.CreateElementException;
import com.top_logic.element.core.util.ElementEventUtil;
import com.top_logic.element.layout.create.CreateFormBuilder;
import com.top_logic.element.layout.create.GenericCreateHandler;
import com.top_logic.element.structured.StructuredElement;
import com.top_logic.layout.form.FormContainer;
import com.top_logic.layout.form.component.AbstractCreateCommandHandler;
import com.top_logic.layout.form.model.SelectField;
import com.top_logic.mig.html.layout.LayoutComponent;
import com.top_logic.model.TLClass;
import com.top_logic.tool.execution.ExecutabilityRule;


/**
 * Create a new {@link StructuredElement} in the context of a
 * {@link StructuredElementCreateComponent}.
 * 
 * @author <a href="mailto:mga@top-logic.com">Michael Gänsler</a>
 * 
 * @deprecated Use {@link GenericCreateHandler} together with {@link CreateFormBuilder}.
 */
@Deprecated
public class StructuredElementCreateHandler extends AbstractCreateCommandHandler {

    /** The command provided by this instance. */
    public static final String COMMAND = "elementCreate";

    public StructuredElementCreateHandler(InstantiationContext context, Config config) {
		super(context, config);
    }

    /** 
     * Handle the creation of a new element.
     * 
     * This method will extract the relevant values from the component and
     * the request and send these to the method {@link #createChild(StructuredElement, TLClass, String)},
     * which will call the business logic. 
     * @param    createContext      The element to be the parent of the new one, must not be <code>null</code>. 
     * @param    formContainer    The form context to get the values from, must not be <code>null</code>.
     *
     * @return   The requested structured element, never <code>null</code>.
     * @see      com.top_logic.layout.form.component.AbstractCreateCommandHandler#createObject(LayoutComponent, java.lang.Object, FormContainer, Map)
     */
    @Override
	public Object createObject(LayoutComponent component, Object createContext, FormContainer formContainer,
			Map<String, Object> arguments) {
        String      theName   = (String) formContainer.getField(StructuredElementCreateComponent.ELEMENT_NAME).getValue();
        SelectField theSelect = (SelectField) formContainer.getField(StructuredElementCreateComponent.ELEMENT_TYPE);
		TLClass type = (TLClass) theSelect.getSingleSelection();
		StructuredElement result = createChild((StructuredElement) createContext, type, theName);
		this.sendEvent(result);
		return result;
    }

    /**
     * This method creates a new StructuredElement. It does not send any MonitorEvent.
     * If you want to do so, use {@link #sendEvent(StructuredElement)}.
     * with the newly created element afterwards.
     * 
     * @param    aParent  The parent of the new child, must not be <code>null</code>..
     * @param    aName    The name for the element, must not be <code>null</code> or empty.
     * @param    type    The desired type of the child, must not be <code>null</code>.
     * @return   The created child, never <code>null</code>.
     * @throws   IllegalArgumentException    If one the params is <code>null</code> or empty.
     * @throws   CreateElementException      If creation fails for reasons like: 
     *                                       is leaf node, no access rights, 
     *                                       failure in the system (db)...
     */
	public StructuredElement createChild(StructuredElement aParent, TLClass type, String aName)
			throws IllegalArgumentException, CreateElementException {
        return aParent.createChild(aName, type);
    }
    
    /**
     * Hook for subclasses. This method sends a MonitorEvent on the ModelTrackinUtil.
     * Overwrite this method if you want to deactivate or send special MonitorEvents.
     * Use this method if you want to generate MonitorEvents outside a GUI-Context.
     * MonitorEvents are generated by default.  
     * 
     * @param anElement the newly created element
     */
    public void sendEvent(StructuredElement anElement) {
        ElementEventUtil.sendEvent(anElement, MonitorEvent.CREATED);
    }
    
    @Override
	@Deprecated
	public ExecutabilityRule createExecutabilityRule() {
        return StructuredElementNoSubTypeRule.INSTANCE;
    }
}
