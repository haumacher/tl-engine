/*
 * SPDX-FileCopyrightText: 2009 (c) Business Operation Systems GmbH <info@top-logic.com>
 * 
 * SPDX-License-Identifier: AGPL-3.0-only OR LicenseRef-BOS-TopLogic-1.0
 */
package com.top_logic.layout.unit;

import com.top_logic.basic.config.InstantiationContext;
import com.top_logic.event.ModelTrackingService;
import com.top_logic.knowledge.wrap.Wrapper;
import com.top_logic.knowledge.wrap.unit.Unit;
import com.top_logic.knowledge.wrap.unit.UnitWrapper;
import com.top_logic.layout.form.component.AbstractApplyCommandHandler;
import com.top_logic.layout.form.model.FormContext;
import com.top_logic.layout.form.model.IntField;
import com.top_logic.layout.form.model.SelectField;
import com.top_logic.mig.html.layout.LayoutComponent;
import com.top_logic.tool.boundsec.CommandHandler;
import com.top_logic.util.TLContext;

/**
 * This {@link CommandHandler} applies changes after editing a {@link Unit} instance.
 * 
 * @author     <a href="mailto:TEH@top-logic.com">TEH</a>
 */
public class ApplyUnitCommandHandler extends AbstractApplyCommandHandler {

    /** ID of this handler. */
    public static final String COMMAND_ID = "applyUnit";

    public ApplyUnitCommandHandler(InstantiationContext context, Config config) {
		super(context, config);
    }
	
	@Override
	protected boolean storeChanges(LayoutComponent aComponent, FormContext aContext, Object aModel) {
		
		Unit theUnit = (Unit) aModel;

		theUnit.setName((String) aContext.getField(UnitWrapper.NAME_ATTRIBUTE).getValue());

		String theFormat = (String) aContext.getField(UnitWrapper.FORMAT).getValue();
		theUnit.setFormatSpec(theFormat);

		theUnit.setSortOrder(((IntField) aContext.getField(UnitWrapper.SORT_ORDER)).getAsInteger());

		UnitWrapper theBase =
			(UnitWrapper) ((SelectField) aContext.getField(UnitWrapper.BASE_FORMAT_REF)).getSingleSelection();
		theUnit.setBaseUnit(theBase);

		Number conversionFactor = (Number) aContext.getField(UnitWrapper.FACTOR).getValue();
		if (conversionFactor == null) {
			theUnit.setConversionFactor(null);
		} else {
			theUnit.setConversionFactor(conversionFactor.doubleValue());
		}
		
		EditUnitComponent.storeI18N((Wrapper) aModel, aContext);

		return true;
	}

	/**
     * Hook for subclasses. This method sends a MonitorEvent on the ModelTrackingService.
     * Overwrite this method if you want to deactivate or send special MonitorEvents.
     * Use this method if you want to generate MonitorEvents outside a GUI-Context.
     * MonitorEvents are generated by default. 
     * 
     * @param aUnit the changed person
     */
    protected void sendEvent(Unit aUnit) {
       ModelTrackingService.sendModifyEvent(aUnit, TLContext.getContext().getCurrentPersonWrapper());
    }
    
    @Override
	protected boolean supportsModel(Object aModel) {
    	return aModel instanceof Unit;
    }
}
