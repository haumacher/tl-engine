/*
 * SPDX-FileCopyrightText: 2012 (c) Business Operation Systems GmbH <info@top-logic.com>
 * 
 * SPDX-License-Identifier: AGPL-3.0-only OR LicenseRef-BOS-TopLogic-1.0
 */
package com.top_logic.basic.sql;

import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.NClob;
import java.sql.PreparedStatement;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Savepoint;
import java.sql.Statement;
import java.sql.Struct;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;


/**
 * Abstract proxy for {@link Connection}.
 * 
 * @see #impl()
 * 
 * @author Automatically generated by <code>com.top_logic.basic.generate.ProxyGenerator</code>
 */
public abstract class ConnectionProxy implements Connection{

	/**
	 * The underlying implementation.
	 */
	protected abstract Connection impl() throws SQLException;

	@Override
	public void setReadOnly(boolean a1) throws SQLException {
		impl().setReadOnly(a1);
	}

	@Override
	public void close() throws SQLException {
		impl().close();
	}

	@Override
	public boolean isReadOnly() throws SQLException {
		return impl().isReadOnly();
	}

	@Override
	public void clearWarnings() throws SQLException {
		impl().clearWarnings();
	}

	@Override
	public void commit() throws SQLException {
		impl().commit();
	}

	@Override
	public Array createArrayOf(String a1, Object[] a2) throws SQLException {
		return impl().createArrayOf(a1, a2);
	}

	@Override
	public Blob createBlob() throws SQLException {
		return impl().createBlob();
	}

	@Override
	public Clob createClob() throws SQLException {
		return impl().createClob();
	}

	@Override
	public NClob createNClob() throws SQLException {
		return impl().createNClob();
	}

	@Override
	public SQLXML createSQLXML() throws SQLException {
		return impl().createSQLXML();
	}

	@Override
	public Statement createStatement(int a1, int a2) throws SQLException {
		return impl().createStatement(a1, a2);
	}

	@Override
	public Statement createStatement(int a1, int a2, int a3) throws SQLException {
		return impl().createStatement(a1, a2, a3);
	}

	@Override
	public Statement createStatement() throws SQLException {
		return impl().createStatement();
	}

	@Override
	public Struct createStruct(String a1, Object[] a2) throws SQLException {
		return impl().createStruct(a1, a2);
	}

	@Override
	public boolean getAutoCommit() throws SQLException {
		return impl().getAutoCommit();
	}

	@Override
	public String getCatalog() throws SQLException {
		return impl().getCatalog();
	}

	@Override
	public String getClientInfo(String a1) throws SQLException {
		return impl().getClientInfo(a1);
	}

	@Override
	public Properties getClientInfo() throws SQLException {
		return impl().getClientInfo();
	}

	@Override
	public int getHoldability() throws SQLException {
		return impl().getHoldability();
	}

	@Override
	public DatabaseMetaData getMetaData() throws SQLException {
		return impl().getMetaData();
	}

	@Override
	public int getTransactionIsolation() throws SQLException {
		return impl().getTransactionIsolation();
	}

	@Override
	public Map<String, Class<?>> getTypeMap() throws SQLException {
		return impl().getTypeMap();
	}

	@Override
	public SQLWarning getWarnings() throws SQLException {
		return impl().getWarnings();
	}

	@Override
	public boolean isClosed() throws SQLException {
		return impl().isClosed();
	}

	@Override
	public boolean isValid(int a1) throws SQLException {
		return impl().isValid(a1);
	}

	@Override
	public String nativeSQL(String a1) throws SQLException {
		return impl().nativeSQL(a1);
	}

	@Override
	public CallableStatement prepareCall(String a1, int a2, int a3, int a4) throws SQLException {
		return impl().prepareCall(a1, a2, a3, a4);
	}

	@Override
	public CallableStatement prepareCall(String a1) throws SQLException {
		return impl().prepareCall(a1);
	}

	@Override
	public CallableStatement prepareCall(String a1, int a2, int a3) throws SQLException {
		return impl().prepareCall(a1, a2, a3);
	}

	@Override
	public PreparedStatement prepareStatement(String a1, int a2) throws SQLException {
		return impl().prepareStatement(a1, a2);
	}

	@Override
	public PreparedStatement prepareStatement(String a1) throws SQLException {
		return impl().prepareStatement(a1);
	}

	@Override
	public PreparedStatement prepareStatement(String a1, String[] a2) throws SQLException {
		return impl().prepareStatement(a1, a2);
	}

	@Override
	public PreparedStatement prepareStatement(String a1, int a2, int a3) throws SQLException {
		return impl().prepareStatement(a1, a2, a3);
	}

	@Override
	public PreparedStatement prepareStatement(String a1, int a2, int a3, int a4) throws SQLException {
		return impl().prepareStatement(a1, a2, a3, a4);
	}

	@Override
	public PreparedStatement prepareStatement(String a1, int[] a2) throws SQLException {
		return impl().prepareStatement(a1, a2);
	}

	@Override
	public void releaseSavepoint(Savepoint a1) throws SQLException {
		impl().releaseSavepoint(a1);
	}

	@Override
	public void rollback() throws SQLException {
		impl().rollback();
	}

	@Override
	public void rollback(Savepoint a1) throws SQLException {
		impl().rollback(a1);
	}

	@Override
	public void setAutoCommit(boolean a1) throws SQLException {
		impl().setAutoCommit(a1);
	}

	@Override
	public void setCatalog(String a1) throws SQLException {
		impl().setCatalog(a1);
	}

	@Override
	public void setClientInfo(Properties a1) throws SQLClientInfoException {
    	try {
    		impl().setClientInfo(a1);
        } catch (SQLClientInfoException ex) {
            throw ex;
        } catch (SQLException ex) {
            throw wrap(ex);
        }
    }
    
	@Override
	public void setClientInfo(String a1, String a2) throws SQLClientInfoException {
    	try {
    		impl().setClientInfo(a1, a2);
        } catch (SQLClientInfoException ex) {
            throw ex;
        } catch (SQLException ex) {
            throw wrap(ex);
        }
	}

	@Override
	public void setHoldability(int a1) throws SQLException {
		impl().setHoldability(a1);
	}

	@Override
	public Savepoint setSavepoint(String a1) throws SQLException {
		return impl().setSavepoint(a1);
	}

	@Override
	public Savepoint setSavepoint() throws SQLException {
		return impl().setSavepoint();
	}

	@Override
	public void setTransactionIsolation(int a1) throws SQLException {
		impl().setTransactionIsolation(a1);
	}

	@Override
	public void setTypeMap(Map<String, Class<?>> a1) throws SQLException {
		impl().setTypeMap(a1);
	}

	@Override
	public boolean isWrapperFor(Class<?> a1) throws SQLException {
		return impl().isWrapperFor(a1);
	}

	@Override
	public <T> T unwrap(Class<T> a1) throws SQLException {
		return impl().unwrap(a1);
	}

	@Override
	public void abort(Executor executor) throws SQLException {
		impl().abort(executor);
	}

	@Override
	public int getNetworkTimeout() throws SQLException {
		return impl().getNetworkTimeout();
	}

	@Override
	public void setNetworkTimeout(Executor executor, int milliseconds) throws SQLException {
		impl().setNetworkTimeout(executor, milliseconds);
	}

	@Override
	public String getSchema() throws SQLException {
		return impl().getSchema();
	}

	@Override
	public void setSchema(String schema) throws SQLException {
		impl().setSchema(schema);
	}

	private SQLClientInfoException wrap(SQLException sqx) {
		SQLClientInfoException sqclie = new SQLClientInfoException();
		sqclie.setNextException(sqx);
		return sqclie;
	}

}
