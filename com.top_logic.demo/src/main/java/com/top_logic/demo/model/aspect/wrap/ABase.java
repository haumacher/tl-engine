/*
 * SPDX-FileCopyrightText: 2024 (c) Business Operation Systems GmbH <info@top-logic.com>
 * 
 * SPDX-License-Identifier: AGPL-3.0-only OR LicenseRef-BOS-TopLogic-1.0
 */
package com.top_logic.demo.model.aspect.wrap;

/**
 * Basic interface for {@link #A_TYPE} business objects.
 * 
 * @author Automatically generated by {@link com.top_logic.element.model.generate.InterfaceGenerator}
 */
public interface ABase extends com.top_logic.demo.model.aspect.Common {

	/**
	 * Name of type <code>A</code>
	 */
	String A_TYPE = "A";

	/**
	 * Part <code>long</code> of <code>A</code>
	 * 
	 * <p>
	 * Declared as <code>tl.core:Long</code> in configuration.
	 * </p>
	 */
	String LONG_ATTR = "long";

	/**
	 * Part <code>override</code> of <code>A</code>
	 * 
	 * <p>
	 * Declared as <code>tl.demo.aspect:Common</code> in configuration.
	 * </p>
	 */
	String OVERRIDE_ATTR = "override";

	/**
	 * Part <code>overrideCollection</code> of <code>A</code>
	 * 
	 * <p>
	 * Declared as <code>tl.demo.aspect:Common</code> in configuration.
	 * </p>
	 */
	String OVERRIDE_COLLECTION_ATTR = "overrideCollection";

	/**
	 * Part <code>overrideDerivedDifferentAlgorithm</code> of <code>A</code>
	 * 
	 * <p>
	 * Declared as <code>tl.demo.aspect:Common</code> in configuration.
	 * </p>
	 */
	String OVERRIDE_DERIVED_DIFFERENT_ALGORITHM_ATTR = "overrideDerivedDifferentAlgorithm";

	/**
	 * Part <code>overrideDerivedSameAlgorithm</code> of <code>A</code>
	 * 
	 * <p>
	 * Declared as <code>tl.demo.aspect:Common</code> in configuration.
	 * </p>
	 */
	String OVERRIDE_DERIVED_SAME_ALGORITHM_ATTR = "overrideDerivedSameAlgorithm";

	/**
	 * Getter for part {@link #LONG_ATTR}.
	 */
	default Long getLong() {
		return (Long) tValueByName(LONG_ATTR);
	}

	/**
	 * Setter for part {@link #LONG_ATTR}.
	 */
	default void setLong(Long newValue) {
		tUpdateByName(LONG_ATTR, newValue);
	}

	/**
	 * Getter for part {@link #OVERRIDE_ATTR}.
	 */
	default com.top_logic.demo.model.aspect.Common getOverride() {
		return (com.top_logic.demo.model.aspect.Common) tValueByName(OVERRIDE_ATTR);
	}

	/**
	 * Setter for part {@link #OVERRIDE_ATTR}.
	 */
	default void setOverride(com.top_logic.demo.model.aspect.Common newValue) {
		tUpdateByName(OVERRIDE_ATTR, newValue);
	}

	/**
	 * Getter for part {@link #OVERRIDE_COLLECTION_ATTR}.
	 */
	@SuppressWarnings("unchecked")
	default java.util.Set<? extends com.top_logic.demo.model.aspect.Common> getOverrideCollection() {
		return (java.util.Set<? extends com.top_logic.demo.model.aspect.Common>) tValueByName(OVERRIDE_COLLECTION_ATTR);
	}

	/**
	 * Live view of the {@link #OVERRIDE_COLLECTION_ATTR} part.
	 * <p>
	 * Changes to this {@link java.util.Collection} change directly the attribute value.
	 * The caller has to take care of the transaction handling.
	 * </p>
	 */
	default java.util.Set<com.top_logic.demo.model.aspect.Common> getOverrideCollectionModifiable() {
		com.top_logic.model.TLStructuredTypePart attribute = tType().getPart(OVERRIDE_COLLECTION_ATTR);
		@SuppressWarnings("unchecked")
		java.util.Set<com.top_logic.demo.model.aspect.Common> result = (java.util.Set<com.top_logic.demo.model.aspect.Common>) com.top_logic.element.meta.kbbased.WrapperMetaAttributeUtil.getLiveCollection(this, attribute);
		return result;
	}

	/**
	 * Setter for part {@link #OVERRIDE_COLLECTION_ATTR}.
	 */
	default void setOverrideCollection(java.util.Set<com.top_logic.demo.model.aspect.Common> newValue) {
		tUpdateByName(OVERRIDE_COLLECTION_ATTR, newValue);
	}

	/**
	 * Adds a value to the {@link #OVERRIDE_COLLECTION_ATTR} reference.
	 */
	default void addOverrideCollection(com.top_logic.demo.model.aspect.Common newValue) {
		tAddByName(OVERRIDE_COLLECTION_ATTR, newValue);
	}

	/**
	 * Removes the given value from the {@link #OVERRIDE_COLLECTION_ATTR} reference.
	 */
	default void removeOverrideCollection(com.top_logic.demo.model.aspect.Common oldValue) {
		tRemoveByName(OVERRIDE_COLLECTION_ATTR, oldValue);
	}

	/**
	 * Getter for part {@link #OVERRIDE_DERIVED_DIFFERENT_ALGORITHM_ATTR}.
	 */
	default com.top_logic.demo.model.aspect.Common getOverrideDerivedDifferentAlgorithm() {
		return (com.top_logic.demo.model.aspect.Common) tValueByName(OVERRIDE_DERIVED_DIFFERENT_ALGORITHM_ATTR);
	}

	/**
	 * Getter for part {@link #OVERRIDE_DERIVED_SAME_ALGORITHM_ATTR}.
	 */
	default com.top_logic.demo.model.aspect.Common getOverrideDerivedSameAlgorithm() {
		return (com.top_logic.demo.model.aspect.Common) tValueByName(OVERRIDE_DERIVED_SAME_ALGORITHM_ATTR);
	}

	/**
	 * Getter for part {@link #OVERRIDE_DIAMOND_ATTR}.
	 */
	@Override
	default com.top_logic.demo.model.aspect.A getOverrideDiamond() {
		return (com.top_logic.demo.model.aspect.A) tValueByName(OVERRIDE_DIAMOND_ATTR);
	}

}
