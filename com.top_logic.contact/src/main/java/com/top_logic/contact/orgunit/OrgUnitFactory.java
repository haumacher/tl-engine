/*
 * SPDX-FileCopyrightText: 2011 (c) Business Operation Systems GmbH <info@top-logic.com>
 * 
 * SPDX-License-Identifier: AGPL-3.0-only OR LicenseRef-BOS-TopLogic-1.0
 */
package com.top_logic.contact.orgunit;


import com.top_logic.basic.UnreachableAssertion;
import com.top_logic.dob.ex.NoSuchAttributeException;
import com.top_logic.element.ElementException;
import com.top_logic.element.meta.MetaElementFactory;
import com.top_logic.element.meta.MetaElementUtil;
import com.top_logic.element.structured.StructuredElementFactory;
import com.top_logic.element.structured.wrap.StructuredElementWrapperFactory;
import com.top_logic.knowledge.service.Branch;
import com.top_logic.model.TLClass;
import com.top_logic.model.TLStructuredTypePart;

/**
 * Factory for <code>OrgUnit</code> objects.
 * 
 * <p>
 * Note: this is generated code. Do not modify. Instead, create a subclass and register this in the module system.
 * </p>
 * 
 * @author Automatically generated by <code>com.top_logic.element.binding.gen.FactoryGenerator</code>
 */
public class OrgUnitFactory extends StructuredElementWrapperFactory {

	/**
	 * Name of the structure <code>OrgUnit</code> defined by {@link OrgUnitFactory}.
	 */
	public static final String ORG_UNIT_STRUCTURE = "orgStructure";

	/**
	 * Lookup {@link OrgUnitAll} meta element.
	 */
	public TLClass getOrgUnitAllType() {
		return MetaElementFactory.getInstance().getGlobalMetaElement(ORG_UNIT_STRUCTURE, OrgUnitAll.ME_ORG_UNIT_ALL);
	}

	/**
	 * Lookup {@link OrgUnitAll#ATTRIBUTE_NAME} attribute of meta element {@link OrgUnitAll}.
	 */
	public TLStructuredTypePart getNameOrgUnitAllAttr() {
		try {
			return MetaElementUtil.getMetaAttribute(getOrgUnitAllType(), OrgUnitAll.ATTRIBUTE_NAME);
		} catch (NoSuchAttributeException ex) {
			throw new UnreachableAssertion("Fixed attribute 'name' not found in type 'OrgUnit.all'", ex);
		}
	}

	/**
	 * Lookup {@link OrgUnitBase} meta element.
	 */
	public TLClass getOrgUnitBaseType() {
		return MetaElementFactory.getInstance().getGlobalMetaElement(ORG_UNIT_STRUCTURE, OrgUnitBase.ME_ORG_UNIT_BASE);
	}

	/**
	 * Lookup {@link OrgUnitBase#ATTRIBUTE_ORG_ID} attribute of meta element {@link OrgUnitBase}.
	 */
	public TLStructuredTypePart getOrgIDOrgUnitBaseAttr() {
		try {
			return MetaElementUtil.getMetaAttribute(getOrgUnitBaseType(), OrgUnitBase.ATTRIBUTE_ORG_ID);
		} catch (NoSuchAttributeException ex) {
			throw new UnreachableAssertion("Fixed attribute 'orgID' not found in type 'OrgUnit.base'", ex);
		}
	}

	/**
	 * Lookup {@link OrgUnitBase#ATTRIBUTE_BOSS} attribute of meta element {@link OrgUnitBase}.
	 */
	public TLStructuredTypePart getBossOrgUnitBaseAttr() {
		try {
			return MetaElementUtil.getMetaAttribute(getOrgUnitBaseType(), OrgUnitBase.ATTRIBUTE_BOSS);
		} catch (NoSuchAttributeException ex) {
			throw new UnreachableAssertion("Fixed attribute 'boss' not found in type 'OrgUnit.base'", ex);
		}
	}

	/**
	 * Lookup {@link OrgUnitBase#ATTRIBUTE_MEMBER} attribute of meta element {@link OrgUnitBase}.
	 */
	public TLStructuredTypePart getMemberOrgUnitBaseAttr() {
		try {
			return MetaElementUtil.getMetaAttribute(getOrgUnitBaseType(), OrgUnitBase.ATTRIBUTE_MEMBER);
		} catch (NoSuchAttributeException ex) {
			throw new UnreachableAssertion("Fixed attribute 'member' not found in type 'OrgUnit.base'", ex);
		}
	}

	/**
	 * Lookup {@link OrgRoot} meta element.
	 */
	public TLClass getOrgRootType() {
		return MetaElementFactory.getInstance().getGlobalMetaElement(ORG_UNIT_STRUCTURE, OrgRoot.ME_ORG_ROOT);
	}

	/**
	 * Lookup {@link OrgHead} meta element.
	 */
	public TLClass getOrgHeadType() {
		return MetaElementFactory.getInstance().getGlobalMetaElement(ORG_UNIT_STRUCTURE, OrgHead.ME_ORG_HEAD);
	}

	/**
	 * Lookup {@link OrgUnit} meta element.
	 */
	public TLClass getOrgUnitType() {
		return MetaElementFactory.getInstance().getGlobalMetaElement(ORG_UNIT_STRUCTURE, OrgUnit.ME_ORG_UNIT);
	}


	// Node name constants.

	/**
	 * Node name of node <code>OrgRoot</code> in structure <code>OrgUnit</code>.
	 */
	public static final String ELEMENT_NAME_ORG_ROOT = "OrgRoot";

	/**
	 * Node name of node <code>OrgHead</code> in structure <code>OrgUnit</code>.
	 */
	public static final String ELEMENT_NAME_ORG_HEAD = "OrgHead";

	/**
	 * Node name of node <code>OrgUnit</code> in structure <code>OrgUnit</code>.
	 */
	public static final String ELEMENT_NAME_ORG_UNIT = "OrgUnit";


	// Root lookup.

	/**
	 * Root node of structure {@link #ORG_UNIT_STRUCTURE}.
	 */
	public OrgRoot getRootOrgUnit(Branch requestedBranch) {
		return (OrgRoot) getRoot(requestedBranch);
	}

	/**
	 * Root node of structure {@link #ORG_UNIT_STRUCTURE}.
	 */
	public OrgRoot getRootOrgUnit() {
		return (OrgRoot) getRoot();
	}

	/**
	 * The singleton instance of {@link OrgUnitFactory}.
	 */
	public static OrgUnitFactory getInstance() throws ElementException {
		return (OrgUnitFactory) StructuredElementFactory.getInstanceForStructure(ORG_UNIT_STRUCTURE);
	}

	protected String getStructureName() {
		return ORG_UNIT_STRUCTURE;
	}

}
