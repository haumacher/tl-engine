/*
 * SPDX-FileCopyrightText: 2024 (c) Business Operation Systems GmbH <info@top-logic.com>
 * 
 * SPDX-License-Identifier: AGPL-3.0-only OR LicenseRef-BOS-TopLogic-1.0
 */
package test.com.top_logic.importer.data.struct;

/**
 * Factory for <code>testStruct</code> objects.
 * 
 * <p>
 * Note: this is generated code. Do not modify. Instead, create a subclass and register this in the module system.
 * </p>
 * 
 * @author Automatically generated by {@link com.top_logic.element.model.generate.FactoryGenerator}
 */
public class TestStructFactory extends com.top_logic.element.structured.wrap.StructuredElementWrapperFactory {

	/**
	 * Name of singleton {@link #TEST_STRUCT_STRUCTURE}.
	 */
	public static final String SINGLETON_ROOT = "ROOT";

	/**
	 * Name of the structure <code>testStruct</code> defined by {@link TestStructFactory}.
	 */
	public static final String TEST_STRUCT_STRUCTURE = "testStruct";

	/**
	 * Lookup {@link TestStructRoot} type.
	 */
	public static com.top_logic.model.TLClass getTestStructRootType() {
		return (com.top_logic.model.TLClass) com.top_logic.util.model.ModelService.getApplicationModel().getModule(TEST_STRUCT_STRUCTURE).getType(TestStructRoot.TEST_STRUCT_ROOT_TYPE);
	}

	/**
	 * Lookup {@link TestStructAll} type.
	 */
	public static com.top_logic.model.TLClass getTestStructAllType() {
		return (com.top_logic.model.TLClass) com.top_logic.util.model.ModelService.getApplicationModel().getModule(TEST_STRUCT_STRUCTURE).getType(TestStructAll.TEST_STRUCT_ALL_TYPE);
	}

	/**
	 * Lookup {@link TestStructAll#BEACON_ATTR} of {@link TestStructAll}.
	 */
	public static com.top_logic.model.TLReference getBeaconTestStructAllAttr() {
		return (com.top_logic.model.TLReference) getTestStructAllType().getPart(TestStructAll.BEACON_ATTR);
	}

	/**
	 * Lookup {@link TestStructAll#CREATED_BY_ATTR} of {@link TestStructAll}.
	 */
	public static com.top_logic.model.TLProperty getCreatedByTestStructAllAttr() {
		return (com.top_logic.model.TLProperty) getTestStructAllType().getPart(TestStructAll.CREATED_BY_ATTR);
	}

	/**
	 * Lookup {@link TestStructAll#CREATED_DATE_ATTR} of {@link TestStructAll}.
	 */
	public static com.top_logic.model.TLProperty getCreatedDateTestStructAllAttr() {
		return (com.top_logic.model.TLProperty) getTestStructAllType().getPart(TestStructAll.CREATED_DATE_ATTR);
	}

	/**
	 * Lookup {@link TestStructAll#HASH_CODE_ATTR} of {@link TestStructAll}.
	 */
	public static com.top_logic.model.TLProperty getHashCodeTestStructAllAttr() {
		return (com.top_logic.model.TLProperty) getTestStructAllType().getPart(TestStructAll.HASH_CODE_ATTR);
	}

	/**
	 * Lookup {@link TestStructAll#ID_ATTR} of {@link TestStructAll}.
	 */
	public static com.top_logic.model.TLProperty getIdTestStructAllAttr() {
		return (com.top_logic.model.TLProperty) getTestStructAllType().getPart(TestStructAll.ID_ATTR);
	}

	/**
	 * Lookup {@link TestStructAll#MODIFIED_BY_ATTR} of {@link TestStructAll}.
	 */
	public static com.top_logic.model.TLProperty getModifiedByTestStructAllAttr() {
		return (com.top_logic.model.TLProperty) getTestStructAllType().getPart(TestStructAll.MODIFIED_BY_ATTR);
	}

	/**
	 * Lookup {@link TestStructAll#MODIFIED_DATE_ATTR} of {@link TestStructAll}.
	 */
	public static com.top_logic.model.TLProperty getModifiedDateTestStructAllAttr() {
		return (com.top_logic.model.TLProperty) getTestStructAllType().getPart(TestStructAll.MODIFIED_DATE_ATTR);
	}

	/**
	 * Lookup {@link TestStructAll#NAME_ATTR} of {@link TestStructAll}.
	 */
	public static com.top_logic.model.TLProperty getNameTestStructAllAttr() {
		return (com.top_logic.model.TLProperty) getTestStructAllType().getPart(TestStructAll.NAME_ATTR);
	}

	/**
	 * Lookup {@link TestStructAll#RESPONSIBLE_ATTR} of {@link TestStructAll}.
	 */
	public static com.top_logic.model.TLReference getResponsibleTestStructAllAttr() {
		return (com.top_logic.model.TLReference) getTestStructAllType().getPart(TestStructAll.RESPONSIBLE_ATTR);
	}

	/**
	 * Lookup {@link TestStructContext} type.
	 */
	public static com.top_logic.model.TLClass getTestStructContextType() {
		return (com.top_logic.model.TLClass) com.top_logic.util.model.ModelService.getApplicationModel().getModule(TEST_STRUCT_STRUCTURE).getType(TestStructContext.TEST_STRUCT_CONTEXT_TYPE);
	}

	/**
	 * Lookup {@link TestStructContext#ACTIVATED_ATTR} of {@link TestStructContext}.
	 */
	public static com.top_logic.model.TLProperty getActivatedTestStructContextAttr() {
		return (com.top_logic.model.TLProperty) getTestStructContextType().getPart(TestStructContext.ACTIVATED_ATTR);
	}

	/**
	 * Lookup {@link TestStructContext#COUNTRY_ATTR} of {@link TestStructContext}.
	 */
	public static com.top_logic.model.TLProperty getCountryTestStructContextAttr() {
		return (com.top_logic.model.TLProperty) getTestStructContextType().getPart(TestStructContext.COUNTRY_ATTR);
	}

	/**
	 * Lookup {@link TestStructContext#IS_ACTIVE_ATTR} of {@link TestStructContext}.
	 */
	public static com.top_logic.model.TLProperty getIsActiveTestStructContextAttr() {
		return (com.top_logic.model.TLProperty) getTestStructContextType().getPart(TestStructContext.IS_ACTIVE_ATTR);
	}

	/**
	 * Lookup {@link TestStructContext#LANGUAGE_ATTR} of {@link TestStructContext}.
	 */
	public static com.top_logic.model.TLProperty getLanguageTestStructContextAttr() {
		return (com.top_logic.model.TLProperty) getTestStructContextType().getPart(TestStructContext.LANGUAGE_ATTR);
	}

	/**
	 * Lookup {@link TestStructSub1} type.
	 */
	public static com.top_logic.model.TLClass getTestStructSub1Type() {
		return (com.top_logic.model.TLClass) com.top_logic.util.model.ModelService.getApplicationModel().getModule(TEST_STRUCT_STRUCTURE).getType(TestStructSub1.TEST_STRUCT_SUB1_TYPE);
	}

	/**
	 * Lookup {@link TestStructSub1#COMPANY_ATTR} of {@link TestStructSub1}.
	 */
	public static com.top_logic.model.TLReference getCompanyTestStructSub1Attr() {
		return (com.top_logic.model.TLReference) getTestStructSub1Type().getPart(TestStructSub1.COMPANY_ATTR);
	}

	/**
	 * Lookup {@link TestStructSub1#COSTS_ATTR} of {@link TestStructSub1}.
	 */
	public static com.top_logic.model.TLProperty getCostsTestStructSub1Attr() {
		return (com.top_logic.model.TLProperty) getTestStructSub1Type().getPart(TestStructSub1.COSTS_ATTR);
	}

	/**
	 * Lookup {@link TestStructSub1#LEAD_ATTR} of {@link TestStructSub1}.
	 */
	public static com.top_logic.model.TLReference getLeadTestStructSub1Attr() {
		return (com.top_logic.model.TLReference) getTestStructSub1Type().getPart(TestStructSub1.LEAD_ATTR);
	}

	/**
	 * Lookup {@link TestStructSub2} type.
	 */
	public static com.top_logic.model.TLClass getTestStructSub2Type() {
		return (com.top_logic.model.TLClass) com.top_logic.util.model.ModelService.getApplicationModel().getModule(TEST_STRUCT_STRUCTURE).getType(TestStructSub2.TEST_STRUCT_SUB2_TYPE);
	}

	/**
	 * Lookup {@link TestStructSub2#LEAD_ATTR} of {@link TestStructSub2}.
	 */
	public static com.top_logic.model.TLReference getLeadTestStructSub2Attr() {
		return (com.top_logic.model.TLReference) getTestStructSub2Type().getPart(TestStructSub2.LEAD_ATTR);
	}

	/**
	 * Lookup {@link TestStructSub2#SIZE_ATTR} of {@link TestStructSub2}.
	 */
	public static com.top_logic.model.TLProperty getSizeTestStructSub2Attr() {
		return (com.top_logic.model.TLProperty) getTestStructSub2Type().getPart(TestStructSub2.SIZE_ATTR);
	}

	/**
	 * Lookup {@link Root} type.
	 */
	public static com.top_logic.model.TLClass getRootType() {
		return (com.top_logic.model.TLClass) com.top_logic.util.model.ModelService.getApplicationModel().getModule(TEST_STRUCT_STRUCTURE).getType(Root.ROOT_TYPE);
	}

	/**
	 * Lookup {@link Root#CHILDREN_ATTR} of {@link Root}.
	 */
	public static com.top_logic.model.TLReference getChildrenRootAttr() {
		return (com.top_logic.model.TLReference) getRootType().getPart(Root.CHILDREN_ATTR);
	}

	/**
	 * Lookup {@link Root#NAME_ATTR} of {@link Root}.
	 */
	public static com.top_logic.model.TLProperty getNameRootAttr() {
		return (com.top_logic.model.TLProperty) getRootType().getPart(Root.NAME_ATTR);
	}

	/**
	 * Lookup {@link Context} type.
	 */
	public static com.top_logic.model.TLClass getContextType() {
		return (com.top_logic.model.TLClass) com.top_logic.util.model.ModelService.getApplicationModel().getModule(TEST_STRUCT_STRUCTURE).getType(Context.CONTEXT_TYPE);
	}

	/**
	 * Lookup {@link Context#CHILDREN_ATTR} of {@link Context}.
	 */
	public static com.top_logic.model.TLReference getChildrenContextAttr() {
		return (com.top_logic.model.TLReference) getContextType().getPart(Context.CHILDREN_ATTR);
	}

	/**
	 * Lookup {@link Sub1} type.
	 */
	public static com.top_logic.model.TLClass getSub1Type() {
		return (com.top_logic.model.TLClass) com.top_logic.util.model.ModelService.getApplicationModel().getModule(TEST_STRUCT_STRUCTURE).getType(Sub1.SUB1_TYPE);
	}

	/**
	 * Lookup {@link Sub2} type.
	 */
	public static com.top_logic.model.TLClass getSub2Type() {
		return (com.top_logic.model.TLClass) com.top_logic.util.model.ModelService.getApplicationModel().getModule(TEST_STRUCT_STRUCTURE).getType(Sub2.SUB2_TYPE);
	}

	/**
	 * Lookup {@link RootChild} type.
	 */
	public static com.top_logic.model.TLClass getRootChildType() {
		return (com.top_logic.model.TLClass) com.top_logic.util.model.ModelService.getApplicationModel().getModule(TEST_STRUCT_STRUCTURE).getType(RootChild.ROOT_CHILD_TYPE);
	}

	/**
	 * Lookup {@link RootChild#PARENT_ATTR} of {@link RootChild}.
	 */
	public static com.top_logic.model.TLReference getParentRootChildAttr() {
		return (com.top_logic.model.TLReference) getRootChildType().getPart(RootChild.PARENT_ATTR);
	}

	/**
	 * Lookup {@link ContextChild} type.
	 */
	public static com.top_logic.model.TLClass getContextChildType() {
		return (com.top_logic.model.TLClass) com.top_logic.util.model.ModelService.getApplicationModel().getModule(TEST_STRUCT_STRUCTURE).getType(ContextChild.CONTEXT_CHILD_TYPE);
	}

	/**
	 * Lookup {@link ContextChild#PARENT_ATTR} of {@link ContextChild}.
	 */
	public static com.top_logic.model.TLReference getParentContextChildAttr() {
		return (com.top_logic.model.TLReference) getContextChildType().getPart(ContextChild.PARENT_ATTR);
	}

	/**
	 * Name of type <code>testStruct.Root</code> in structure {@link #TEST_STRUCT_STRUCTURE}.
	 * 
	 * @deprecated Use {@link TestStructRoot#TEST_STRUCT_ROOT_TYPE}.
	 */
	@Deprecated
	public static final String TEST_STRUCT_ROOT_NODE = TestStructRoot.TEST_STRUCT_ROOT_TYPE;

	/**
	 * Name of type <code>testStruct.All</code> in structure {@link #TEST_STRUCT_STRUCTURE}.
	 * 
	 * @deprecated Use {@link TestStructAll#TEST_STRUCT_ALL_TYPE}.
	 */
	@Deprecated
	public static final String TEST_STRUCT_ALL_NODE = TestStructAll.TEST_STRUCT_ALL_TYPE;

	/**
	 * Name of type <code>testStruct.Context</code> in structure {@link #TEST_STRUCT_STRUCTURE}.
	 * 
	 * @deprecated Use {@link TestStructContext#TEST_STRUCT_CONTEXT_TYPE}.
	 */
	@Deprecated
	public static final String TEST_STRUCT_CONTEXT_NODE = TestStructContext.TEST_STRUCT_CONTEXT_TYPE;

	/**
	 * Name of type <code>testStruct.Sub1</code> in structure {@link #TEST_STRUCT_STRUCTURE}.
	 * 
	 * @deprecated Use {@link TestStructSub1#TEST_STRUCT_SUB1_TYPE}.
	 */
	@Deprecated
	public static final String TEST_STRUCT_SUB1_NODE = TestStructSub1.TEST_STRUCT_SUB1_TYPE;

	/**
	 * Name of type <code>testStruct.Sub2</code> in structure {@link #TEST_STRUCT_STRUCTURE}.
	 * 
	 * @deprecated Use {@link TestStructSub2#TEST_STRUCT_SUB2_TYPE}.
	 */
	@Deprecated
	public static final String TEST_STRUCT_SUB2_NODE = TestStructSub2.TEST_STRUCT_SUB2_TYPE;

	/**
	 * Name of type <code>Root</code> in structure {@link #TEST_STRUCT_STRUCTURE}.
	 * 
	 * @deprecated Use {@link Root#ROOT_TYPE}.
	 */
	@Deprecated
	public static final String ROOT_NODE = Root.ROOT_TYPE;

	/**
	 * Storage table name of {@link #ROOT_NODE} objects.
	 */
	public static final String KO_NAME_ROOT = "StructuredElement";

	/**
	 * Name of type <code>Context</code> in structure {@link #TEST_STRUCT_STRUCTURE}.
	 * 
	 * @deprecated Use {@link Context#CONTEXT_TYPE}.
	 */
	@Deprecated
	public static final String CONTEXT_NODE = Context.CONTEXT_TYPE;

	/**
	 * Storage table name of {@link #CONTEXT_NODE} objects.
	 */
	public static final String KO_NAME_CONTEXT = "StructuredElement";

	/**
	 * Name of type <code>Sub1</code> in structure {@link #TEST_STRUCT_STRUCTURE}.
	 * 
	 * @deprecated Use {@link Sub1#SUB1_TYPE}.
	 */
	@Deprecated
	public static final String SUB1_NODE = Sub1.SUB1_TYPE;

	/**
	 * Storage table name of {@link #SUB1_NODE} objects.
	 */
	public static final String KO_NAME_SUB1 = "StructuredElement";

	/**
	 * Name of type <code>Sub2</code> in structure {@link #TEST_STRUCT_STRUCTURE}.
	 * 
	 * @deprecated Use {@link Sub2#SUB2_TYPE}.
	 */
	@Deprecated
	public static final String SUB2_NODE = Sub2.SUB2_TYPE;

	/**
	 * Storage table name of {@link #SUB2_NODE} objects.
	 */
	public static final String KO_NAME_SUB2 = "StructuredElement";

	/**
	 * Name of type <code>RootChild</code> in structure {@link #TEST_STRUCT_STRUCTURE}.
	 * 
	 * @deprecated Use {@link RootChild#ROOT_CHILD_TYPE}.
	 */
	@Deprecated
	public static final String ROOT_CHILD_NODE = RootChild.ROOT_CHILD_TYPE;

	/**
	 * Name of type <code>ContextChild</code> in structure {@link #TEST_STRUCT_STRUCTURE}.
	 * 
	 * @deprecated Use {@link ContextChild#CONTEXT_CHILD_TYPE}.
	 */
	@Deprecated
	public static final String CONTEXT_CHILD_NODE = ContextChild.CONTEXT_CHILD_TYPE;

	/**
	 * Singleton <code>ROOT</code>.
	 */
	public Root getRootSingleton() {
		return (Root) lookupSingleton(SINGLETON_ROOT);
	}

	/**
	 * Singleton <code>ROOT</code> on given branch.
	 */
	public Root getRootSingleton(com.top_logic.knowledge.service.Branch requestedBranch) {
		return (Root) lookupSingleton(SINGLETON_ROOT, requestedBranch);
	}

	/**
	 * Singleton <code>ROOT</code> on given branch in given revision.
	 */
	public Root getRootSingleton(com.top_logic.knowledge.service.Branch requestedBranch, com.top_logic.knowledge.service.Revision historyContext) {
		return (Root) lookupSingleton(SINGLETON_ROOT, requestedBranch, historyContext);
	}


	/**
	 * Create an instance of {@link Root} type.
	 */
	public final Root createRoot(com.top_logic.model.TLObject context) {
		return (Root) createObject(getRootType(), context);
	}

	/**
	 * Create an instance of {@link Root} type.
	 */
	public final Root createRoot() {
		return createRoot(null);
	}

	/**
	 * Create an instance of {@link Context} type.
	 */
	public final Context createContext(com.top_logic.model.TLObject context) {
		return (Context) createObject(getContextType(), context);
	}

	/**
	 * Create an instance of {@link Context} type.
	 */
	public final Context createContext() {
		return createContext(null);
	}

	/**
	 * Create an instance of {@link Sub1} type.
	 */
	public final Sub1 createSub1(com.top_logic.model.TLObject context) {
		return (Sub1) createObject(getSub1Type(), context);
	}

	/**
	 * Create an instance of {@link Sub1} type.
	 */
	public final Sub1 createSub1() {
		return createSub1(null);
	}

	/**
	 * Create an instance of {@link Sub2} type.
	 */
	public final Sub2 createSub2(com.top_logic.model.TLObject context) {
		return (Sub2) createObject(getSub2Type(), context);
	}

	/**
	 * Create an instance of {@link Sub2} type.
	 */
	public final Sub2 createSub2() {
		return createSub2(null);
	}

	/**
	 * The singleton instance of {@link TestStructFactory}.
	 */
	public static TestStructFactory getInstance() {
		return (TestStructFactory) com.top_logic.element.model.DynamicModelService.getFactoryFor(TEST_STRUCT_STRUCTURE);
	}
}
