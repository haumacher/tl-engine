/*
 * SPDX-FileCopyrightText: 2017 (c) Business Operation Systems GmbH <info@top-logic.com>
 * 
 * SPDX-License-Identifier: AGPL-3.0-only OR LicenseRef-BOS-TopLogic-1.0
 */
package com.top_logic.model.search.persistency.expressions;

import com.top_logic.element.meta.kbbased.AbstractElementFactory;
import com.top_logic.element.model.DynamicModelService;
import com.top_logic.model.TLClass;
import com.top_logic.model.TLStructuredTypePart;
import com.top_logic.util.model.ModelService;

/**
 * Factory for <code>SearchExpressionStructure</code> objects.
 * 
 * <p>
 * Note: this is generated code. Do not modify. Instead, create a subclass and register this in the module system.
 * </p>
 * 
 * @author Automatically generated by {@link com.top_logic.element.model.generate.FactoryGenerator}
 */
public class SearchExpressionStructureFactory extends AbstractElementFactory {

	/**
	 * Name of the structure <code>SearchExpressionStructure</code> defined by {@link SearchExpressionStructureFactory}.
	 */
	public static final String SEARCH_EXPRESSION_STRUCTURE_STRUCTURE = "SearchExpressionStructure";

	/**
	 * Lookup {@link SearchExpression} type.
	 */
	public TLClass getSearchExpressionType() {
		return (TLClass) ModelService.getApplicationModel().getModule(SEARCH_EXPRESSION_STRUCTURE_STRUCTURE).getType(SearchExpression.SEARCH_EXPRESSION_TYPE);
	}

	/**
	 * Lookup {@link SearchExpression#EXPRESSION_ATTR} of {@link SearchExpression}.
	 */
	public TLStructuredTypePart getExpressionSearchExpressionAttr() {
		return getSearchExpressionType().getPart(SearchExpression.EXPRESSION_ATTR);
	}

	/**
	 * Lookup {@link SearchExpression#NAME_ATTR} of {@link SearchExpression}.
	 */
	public TLStructuredTypePart getNameSearchExpressionAttr() {
		return getSearchExpressionType().getPart(SearchExpression.NAME_ATTR);
	}

	/**
	 * Lookup {@link SearchExpression#VERSION_ATTR} of {@link SearchExpression}.
	 */
	public TLStructuredTypePart getVersionSearchExpressionAttr() {
		return getSearchExpressionType().getPart(SearchExpression.VERSION_ATTR);
	}

	/**
	 * Lookup {@link SearchExpressionNode} type.
	 */
	public TLClass getSearchExpressionNodeType() {
		return (TLClass) ModelService.getApplicationModel().getModule(SEARCH_EXPRESSION_STRUCTURE_STRUCTURE).getType(SearchExpressionNode.SEARCH_EXPRESSION_NODE_TYPE);
	}

	// Type name constants.

	/**
	 * Name of type <code>SearchExpression</code> in structure {@link #SEARCH_EXPRESSION_STRUCTURE_STRUCTURE}.
	 */
	public static final String SEARCH_EXPRESSION_NODE = SearchExpression.SEARCH_EXPRESSION_TYPE;

	/**
	 * Name of type <code>SearchExpressionNode</code> in structure {@link #SEARCH_EXPRESSION_STRUCTURE_STRUCTURE}.
	 */
	public static final String SEARCH_EXPRESSION_NODE_NODE = SearchExpressionNode.SEARCH_EXPRESSION_NODE_TYPE;

	/**
	 * Storage table name of {@link #SEARCH_EXPRESSION_NODE_NODE} objects.
	 */
	public static final String KO_NAME_SEARCH_EXPRESSION_NODE = "SearchExpressionTable";

	/**
	 * Factory method to instantiate node {@link #SEARCH_EXPRESSION_NODE_NODE}.
	 */
	public SearchExpressionNode newSearchExpressionNode() {
		return (SearchExpressionNode) createNewWrapper(SEARCH_EXPRESSION_NODE_NODE);
	}

	/**
	 * The singleton instance of {@link SearchExpressionStructureFactory}.
	 */
	public static SearchExpressionStructureFactory getInstance() {
		return (SearchExpressionStructureFactory) DynamicModelService.getFactoryFor(SEARCH_EXPRESSION_STRUCTURE_STRUCTURE);
	}
}
