/* Generated By:JavaCC: Do not edit this line. ExpressionParser.java */
/*
 * SPDX-FileCopyrightText: 2015 (c) Business Operation Systems GmbH <info@top-logic.com>
 * 
 * SPDX-License-Identifier: AGPL-3.0-only OR LicenseRef-BOS-TopLogic-1.0
 */
package com.top_logic.element.meta.expr.parser;

import java.util.*;
import com.top_logic.basic.config.PolymorphicConfiguration;
import com.top_logic.element.meta.expr.internal.OperationFactory;
import com.top_logic.element.meta.kbbased.filtergen.AttributeValueLocator;

/**
 * Parser for an {@link AttributeValueLocator} expression syntax.
 *
 * @author <a href="mailto:bhu@top-logic.com">Bernhard Haumacher</a>
 */
public class ExpressionParser implements ExpressionParserConstants {
  private OperationFactory _f;

  public void setOperationFactory(OperationFactory f) {
        _f = f;
  }

  final public PolymorphicConfiguration<? extends AttributeValueLocator> expr() throws ParseException {
  List<PolymorphicConfiguration<? extends AttributeValueLocator>> l = new ArrayList<>();
    step(l);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 9:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(9);
      step(l);
    }
    if (l.size() == 1) {
      {if (true) return l.get(0);}
    } else {
      {if (true) return _f.chain(l);}
    }
    throw new Error("Missing return statement in function");
  }

  final public void step(List<PolymorphicConfiguration<? extends AttributeValueLocator>> r) throws ParseException {
  Token m, t, a, n, s = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 10:
      jj_consume_token(10);
      m = jj_consume_token(NAME);
      jj_consume_token(11);
      t = jj_consume_token(NAME);
      jj_consume_token(12);
      a = jj_consume_token(NAME);
    r.add(_f.backwards(m.image, t.image, a.image));
      break;
    case 13:
      jj_consume_token(13);
      m = jj_consume_token(NAME);
      jj_consume_token(11);
      t = jj_consume_token(NAME);
      jj_consume_token(14);
    r.add(_f.typeOf(m.image, t.image));
      break;
    case 15:
      jj_consume_token(15);
      a = jj_consume_token(NAME);
    r.add(_f.associationDestinations(a.image));
      break;
    case 16:
      jj_consume_token(16);
      a = jj_consume_token(NAME);
    r.add(_f.associationSources(a.image));
      break;
    case 17:
      jj_consume_token(17);
      n = jj_consume_token(NAME);
    r.add(_f.data(n.image));
      break;
    case NAME:
      n = jj_consume_token(NAME);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 13:
        jj_consume_token(13);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING:
          s = jj_consume_token(STRING);
          break;
        default:
          jj_la1[1] = jj_gen;
          ;
        }
        jj_consume_token(14);
      r.add(_f.locator(n.image, s == null ? null : s.image));
        break;
      default:
        jj_la1[2] = jj_gen;
        valueStep(r, n);
      }
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void valueStep(List<PolymorphicConfiguration<? extends AttributeValueLocator>> r, Token n) throws ParseException {
  Token x, t, a;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 12:
      jj_consume_token(12);
      t = jj_consume_token(NAME);
      jj_consume_token(13);
      jj_consume_token(14);
        r.add(_f.method(n.image, t.image));
      break;
    case 11:
      jj_consume_token(11);
      t = jj_consume_token(NAME);
      jj_consume_token(12);
      a = jj_consume_token(NAME);
      r.add(_f.typeOf(n.image, t.image));
      r.add(_f.value(a.image));
      break;
    default:
      jj_la1[4] = jj_gen;
      r.add(_f.value(n.image));
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 18:
      jj_consume_token(18);
      x = jj_consume_token(NUM);
      jj_consume_token(19);
      r.add(_f.index(Integer.parseInt(x.image)));
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
  }

  /** Generated Token Manager. */
  public ExpressionParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x200,0x40,0x2000,0x3a420,0x1800,0x40000,};
   }

  /** Constructor with InputStream. */
  public ExpressionParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ExpressionParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ExpressionParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ExpressionParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ExpressionParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ExpressionParser(ExpressionParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ExpressionParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[20];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 20; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
