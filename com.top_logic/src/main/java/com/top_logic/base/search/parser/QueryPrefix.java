// $codepro.audit.disable
/*
 * SPDX-FileCopyrightText: 2001 (c) Business Operation Systems GmbH <info@top-logic.com>
 * 
 * SPDX-License-Identifier: AGPL-3.0-only OR LicenseRef-BOS-TopLogic-1.0
 */
/* Generated By:JavaCC: Do not edit this line. QueryPrefix.java */
package com.top_logic.base.search.parser;

import java.util.ArrayList;
import java.util.HashMap;

import com.top_logic.base.search.Query;
import com.top_logic.base.search.QueryException;
import com.top_logic.base.search.QueryNode;
import com.top_logic.base.search.nodes.AllNode;
import com.top_logic.base.search.nodes.BinaryFilter;
import com.top_logic.base.search.nodes.BinaryOper;
import com.top_logic.base.search.nodes.ExampleNode;
import com.top_logic.base.search.nodes.LiteralNode;
import com.top_logic.base.search.nodes.UnaryFilter;
import com.top_logic.base.search.nodes.UnaryOper;

/** Parser for Knowledge Queries in infix notation.
 *
 * @author  <a href="mailto:kha@top-logic.com">Klaus Halfmann</a>
 */
public final class QueryPrefix implements QueryPrefixConstants {

    /** This is called by the CTor of Query to do the actual parsing.
     *
     * @param expression The Query language Expression to be parsed.
     *
     * @return aQuery after pasring the expression.
     *
     * @throws QueryException on Syntactically and semantically Errors.
     */
    public static Query parse(String expression) throws QueryException, ParseException {
        QueryPrefix qp = new QueryPrefix(new java.io.StringReader(expression));
            return qp.query();
    }

  final public Query query() throws ParseException, QueryException {
    QueryNode   root  = null;
    String[]    order = null;
    root = expression();
    switch (jj_nt.kind) {
    case ORDERBY:
      order = orderBy();
      break;
    default:
      jj_la1[0] = jj_gen;
      
    }
    jj_consume_token(0);
      {if (true) return new Query(root,order);}
    throw new Error("Missing return statement in function");
  }

  final public QueryNode expression() throws ParseException, QueryException {
    Token           t;
    QueryNode       n1,n2;
    LiteralNode     lt1,lt2;
    switch (jj_nt.kind) {
    case ALLORNONE:
      n1 = allOrNone();
        {if (true) return n1;}
      break;
    case NOT:
      t = jj_consume_token(NOT);
      jj_consume_token(OPEN);
      n1 = expression();
      jj_consume_token(CLOSE);
        {if (true) return new UnaryOper(t.kind, n1);}
      break;
    case EXAMPLE:
      t = jj_consume_token(EXAMPLE);
      jj_consume_token(OPEN);
        {if (true) return example();}
      break;
    case ID:
    case TYPE:
    case TEXT:
      switch (jj_nt.kind) {
      case ID:
        t = jj_consume_token(ID);
        break;
      case TYPE:
        t = jj_consume_token(TYPE);
        break;
      case TEXT:
        t = jj_consume_token(TEXT);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(OPEN);
      lt1 = literal();
      jj_consume_token(CLOSE);
        {if (true) return new UnaryFilter(t.kind, lt1);}
      break;
    case AND:
    case OR:
    case MATCHES:
    case ISSOURCE:
    case ISDEST:
      switch (jj_nt.kind) {
      case AND:
        t = jj_consume_token(AND);
        break;
      case OR:
        t = jj_consume_token(OR);
        break;
      case MATCHES:
        t = jj_consume_token(MATCHES);
        break;
      case ISSOURCE:
        t = jj_consume_token(ISSOURCE);
        break;
      case ISDEST:
        t = jj_consume_token(ISDEST);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(OPEN);
      n1 = expression();
      jj_consume_token(COMMA);
      n2 = expression();
      jj_consume_token(CLOSE);
        {if (true) return new BinaryOper(t.kind, n1, n2);}
      break;
    case EQUALS:
    case LT:
    case GT:
    case LE:
    case GE:
    case ISIN:
    case LIKE:
      switch (jj_nt.kind) {
      case EQUALS:
        t = jj_consume_token(EQUALS);
        break;
      case LT:
        t = jj_consume_token(LT);
        break;
      case GT:
        t = jj_consume_token(GT);
        break;
      case LE:
        t = jj_consume_token(LE);
        break;
      case GE:
        t = jj_consume_token(GE);
        break;
      case ISIN:
        t = jj_consume_token(ISIN);
        break;
      case LIKE:
        t = jj_consume_token(LIKE);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(OPEN);
      lt1 = identifier();
      jj_consume_token(COMMA);
      lt2 = attribute();
      jj_consume_token(CLOSE);
        {if (true) return new BinaryFilter(t.kind, lt1, lt2);}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/** Parse "ALL" or "NONE".  */
  final public AllNode allOrNone() throws ParseException, QueryException {
    Token       t;
    t = jj_consume_token(ALLORNONE);
        if (t.image.startsWith("A"))      // "A", "ALL"
            {if (true) return AllNode.ALL;}
        else                              // "N", "NONE" 
            {if (true) return AllNode.NONE;}
    throw new Error("Missing return statement in function");
  }

/** Parse an ExampleNode as list of Attribute/Value pairs */
  final public ExampleNode example() throws ParseException, QueryException {
    HashMap map = new HashMap();
    examplePair(map);
    jj_consume_token(CLOSE);
        {if (true) return new ExampleNode(map);}
    throw new Error("Missing return statement in function");
  }

/** Recursivly build up a Map with key / value pairs */
  final public void examplePair(HashMap map) throws ParseException, QueryException {
    Token       ident;
    LiteralNode literal;
    ident = jj_consume_token(IDENTIFIER);
    jj_consume_token(COMMA);
    literal = literal();
    switch (jj_nt.kind) {
    case COMMA:
      jj_consume_token(COMMA);
      examplePair(map);
      break;
    default:
      jj_la1[5] = jj_gen;
      
    }
        map.put (ident.image, literal.getValue());
  }

/** Attributes are either Literals or Identifiers. */
  final public LiteralNode attribute() throws ParseException, QueryException {
    LiteralNode lt;
    switch (jj_nt.kind) {
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case BOOLEAN_LITERAL:
    case DATE_LITERAL:
    case TIME_LITERAL:
      lt = literal();
      break;
    case IDENTIFIER:
      lt = identifier();
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return lt;}
    throw new Error("Missing return statement in function");
  }

/** Identifiers are treated like literals (for parsing).. */
  final public LiteralNode identifier() throws ParseException, QueryException {
    Token       t;
    t = jj_consume_token(IDENTIFIER);
        // 
        {if (true) return new LiteralNode(t.kind, t.image);}
    throw new Error("Missing return statement in function");
  }

/** Attributes are either Literals or Identifiers. */
  final public LiteralNode literal() throws ParseException, QueryException {
    Token       t,t2 = null;
    switch (jj_nt.kind) {
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case TIME_LITERAL:
      switch (jj_nt.kind) {
      case INTEGER_LITERAL:
        t = jj_consume_token(INTEGER_LITERAL);
        break;
      case FLOATING_POINT_LITERAL:
        t = jj_consume_token(FLOATING_POINT_LITERAL);
        break;
      case STRING_LITERAL:
        t = jj_consume_token(STRING_LITERAL);
        break;
      case TIME_LITERAL:
        t = jj_consume_token(TIME_LITERAL);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        {if (true) return new LiteralNode(t.kind, t.image);}
      break;
    case BOOLEAN_LITERAL:
      t = jj_consume_token(BOOLEAN_LITERAL);
        if (t.image.startsWith("T"))       // "T", "TRUE"
            {if (true) return LiteralNode.LITERAL_TRUE;}
        else                                // "F", "FALSE" 
            {if (true) return LiteralNode.LITERAL_FALSE;}
      break;
    case DATE_LITERAL:
      t = jj_consume_token(DATE_LITERAL);
      switch (jj_nt.kind) {
      case TIME_LITERAL:
        t2 = jj_consume_token(TIME_LITERAL);
        break;
      default:
        jj_la1[8] = jj_gen;
        
      }
        if (t2 == null)
            {if (true) return new LiteralNode(t.kind, t.image);}
        else    // both != null
            {if (true) return new LiteralNode(DATE_TIME_LITERAL, t.image + ' ' + t2.image);}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String[] orderBy() throws ParseException, QueryException {
      ArrayList list = new ArrayList();
    jj_consume_token(ORDERBY);
    orderByList(list);
        String result[] = new String[list.size()];
        list.toArray(result);
        {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

/** Recursivly build up a list of identifiers */
  final public void orderByList(ArrayList list) throws ParseException, QueryException {
    Token t;
    t = jj_consume_token(IDENTIFIER);
    switch (jj_nt.kind) {
    case COMMA:
      jj_consume_token(COMMA);
      orderByList(list);
      break;
    default:
      jj_la1[10] = jj_gen;
      
    }
        list.add (0, t.image);
  }

  public QueryPrefixTokenManager token_source;
  JavaCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_gen;
  final private int[] jj_la1 = new int[11];
  final private int[] jj_la1_0 = {0x200,0x3800,0x7c000,0x3f80000,0xffffc00,0x80,0x10000000,0x10000000,0x0,0x10000000,0x80,};
  final private int[] jj_la1_1 = {0x0,0x0,0x0,0x0,0x0,0x0,0x3b2,0x112,0x100,0x1b2,0x0,};

  public QueryPrefix(java.io.InputStream stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new QueryPrefixTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  public QueryPrefix(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new QueryPrefixTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  public QueryPrefix(QueryPrefixTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  public void ReInit(QueryPrefixTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken = token;
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    jj_nt = token;
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  final public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[44];
    for (int i = 0; i < 44; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 11; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 44; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
