/* Generated By:JavaCC: Do not edit this line. TemplateParserConstants.java */
package com.top_logic.template.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface TemplateParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int EQ = 8;
  /** RegularExpression Id. */
  int NE = 9;
  /** RegularExpression Id. */
  int GE = 10;
  /** RegularExpression Id. */
  int LE = 11;
  /** RegularExpression Id. */
  int GT = 12;
  /** RegularExpression Id. */
  int LT = 13;
  /** RegularExpression Id. */
  int AND = 14;
  /** RegularExpression Id. */
  int OR = 15;
  /** RegularExpression Id. */
  int NOT = 16;
  /** RegularExpression Id. */
  int LPAREN = 17;
  /** RegularExpression Id. */
  int RPAREN = 18;
  /** RegularExpression Id. */
  int LBRACE = 19;
  /** RegularExpression Id. */
  int RBRACE = 20;
  /** RegularExpression Id. */
  int LBRACKET = 21;
  /** RegularExpression Id. */
  int RBRACKET = 22;
  /** RegularExpression Id. */
  int SEMICOLON = 23;
  /** RegularExpression Id. */
  int COMMA = 24;
  /** RegularExpression Id. */
  int DOT = 25;
  /** RegularExpression Id. */
  int COLON = 26;
  /** RegularExpression Id. */
  int MODREF = 27;
  /** RegularExpression Id. */
  int FUNCREF = 28;
  /** RegularExpression Id. */
  int OPENENDTAG = 29;
  /** RegularExpression Id. */
  int OPENSTARTTAG = 30;
  /** RegularExpression Id. */
  int CLOSEEMPTYTAG = 31;
  /** RegularExpression Id. */
  int CLOSETAG = 32;
  /** RegularExpression Id. */
  int IF = 33;
  /** RegularExpression Id. */
  int ELSEIF = 34;
  /** RegularExpression Id. */
  int ELSE = 35;
  /** RegularExpression Id. */
  int FOREACH = 36;
  /** RegularExpression Id. */
  int ASSIGN = 37;
  /** RegularExpression Id. */
  int DEFINE = 38;
  /** RegularExpression Id. */
  int IN = 39;
  /** RegularExpression Id. */
  int AS = 40;
  /** RegularExpression Id. */
  int SQUOTE = 41;
  /** RegularExpression Id. */
  int EQUOTE = 42;
  /** RegularExpression Id. */
  int STRING_LITERAL = 43;
  /** RegularExpression Id. */
  int TRUE = 44;
  /** RegularExpression Id. */
  int FALSE = 45;
  /** RegularExpression Id. */
  int LITERAL = 46;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 47;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 48;
  /** RegularExpression Id. */
  int HEX_LITERAL = 49;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 50;
  /** RegularExpression Id. */
  int IDENTIFIER = 51;
  /** RegularExpression Id. */
  int LETTER = 52;
  /** RegularExpression Id. */
  int DIGIT = 53;
  /** RegularExpression Id. */
  int WILDCARD = 54;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int WithinComment = 1;
  /** Lexical state. */
  int Syntax = 2;
  /** Lexical state. */
  int Stringmode = 3;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"<%!--\"",
    "\"--%>\"",
    "<token of kind 3>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"==\"",
    "\"!=\"",
    "\">=\"",
    "\"<=\"",
    "\">\"",
    "\"<\"",
    "\"&&\"",
    "\"||\"",
    "\"!\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\":\"",
    "\"$\"",
    "\"#\"",
    "<OPENENDTAG>",
    "<OPENSTARTTAG>",
    "\"/%>\"",
    "\"%>\"",
    "\"if\"",
    "\"elseif\"",
    "\"else\"",
    "\"foreach\"",
    "\"=\"",
    "\"def\"",
    "\"in\"",
    "\"as\"",
    "\"\\\"\"",
    "\"\\\"\"",
    "<STRING_LITERAL>",
    "\"true\"",
    "\"false\"",
    "<LITERAL>",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\"*\"",
  };

}
