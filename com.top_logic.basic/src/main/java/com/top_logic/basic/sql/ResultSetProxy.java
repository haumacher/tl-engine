/*
 * SPDX-FileCopyrightText: 2012 (c) Business Operation Systems GmbH <info@top-logic.com>
 * 
 * SPDX-License-Identifier: AGPL-3.0-only OR LicenseRef-BOS-TopLogic-1.0
 */
package com.top_logic.basic.sql;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Array;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.Date;
import java.sql.NClob;
import java.sql.Ref;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.RowId;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Statement;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.Map;


/**
 * Abstract proxy for {@link ResultSet}.
 * 
 * @see #impl()
 * 
 * @author Automatically generated by <code>com.top_logic.basic.generate.ProxyGenerator</code>
 */
public abstract class ResultSetProxy implements ResultSet{

	/**
	 * The underlying implementation.
	 */
	protected abstract ResultSet impl();

	@Override
	public Object getObject(int a1) throws SQLException {
		return impl().getObject(a1);
	}

	@Override
	public Object getObject(String a1, Map<String, Class<?>> a2) throws SQLException {
		return impl().getObject(a1, a2);
	}

	@Override
	public Object getObject(int a1, Map<String, Class<?>> a2) throws SQLException {
		return impl().getObject(a1, a2);
	}

	@Override
	public Object getObject(String a1) throws SQLException {
		return impl().getObject(a1);
	}

	@Override
	public boolean getBoolean(int a1) throws SQLException {
		return impl().getBoolean(a1);
	}

	@Override
	public boolean getBoolean(String a1) throws SQLException {
		return impl().getBoolean(a1);
	}

	@Override
	public byte getByte(int a1) throws SQLException {
		return impl().getByte(a1);
	}

	@Override
	public byte getByte(String a1) throws SQLException {
		return impl().getByte(a1);
	}

	@Override
	public short getShort(int a1) throws SQLException {
		return impl().getShort(a1);
	}

	@Override
	public short getShort(String a1) throws SQLException {
		return impl().getShort(a1);
	}

	@Override
	public int getInt(String a1) throws SQLException {
		return impl().getInt(a1);
	}

	@Override
	public int getInt(int a1) throws SQLException {
		return impl().getInt(a1);
	}

	@Override
	public long getLong(int a1) throws SQLException {
		return impl().getLong(a1);
	}

	@Override
	public long getLong(String a1) throws SQLException {
		return impl().getLong(a1);
	}

	@Override
	public float getFloat(int a1) throws SQLException {
		return impl().getFloat(a1);
	}

	@Override
	public float getFloat(String a1) throws SQLException {
		return impl().getFloat(a1);
	}

	@Override
	public double getDouble(String a1) throws SQLException {
		return impl().getDouble(a1);
	}

	@Override
	public double getDouble(int a1) throws SQLException {
		return impl().getDouble(a1);
	}

	@Override
	public byte[] getBytes(int a1) throws SQLException {
		return impl().getBytes(a1);
	}

	@Override
	public byte[] getBytes(String a1) throws SQLException {
		return impl().getBytes(a1);
	}

	@Override
	public Array getArray(int a1) throws SQLException {
		return impl().getArray(a1);
	}

	@Override
	public Array getArray(String a1) throws SQLException {
		return impl().getArray(a1);
	}

	@Override
	public boolean next() throws SQLException {
		return impl().next();
	}

	@Override
	public URL getURL(int a1) throws SQLException {
		return impl().getURL(a1);
	}

	@Override
	public URL getURL(String a1) throws SQLException {
		return impl().getURL(a1);
	}

	@Override
	public void close() throws SQLException {
		impl().close();
	}

	@Override
	public int getType() throws SQLException {
		return impl().getType();
	}

	@Override
	public boolean previous() throws SQLException {
		return impl().previous();
	}

	@Override
	public Ref getRef(int a1) throws SQLException {
		return impl().getRef(a1);
	}

	@Override
	public Ref getRef(String a1) throws SQLException {
		return impl().getRef(a1);
	}

	@Override
	public String getString(String a1) throws SQLException {
		return impl().getString(a1);
	}

	@Override
	public String getString(int a1) throws SQLException {
		return impl().getString(a1);
	}

	@Override
	public boolean isFirst() throws SQLException {
		return impl().isFirst();
	}

	@Override
	public Date getDate(String a1) throws SQLException {
		return impl().getDate(a1);
	}

	@Override
	public Date getDate(int a1, Calendar a2) throws SQLException {
		return impl().getDate(a1, a2);
	}

	@Override
	public Date getDate(String a1, Calendar a2) throws SQLException {
		return impl().getDate(a1, a2);
	}

	@Override
	public Date getDate(int a1) throws SQLException {
		return impl().getDate(a1);
	}

	@Override
	public boolean absolute(int a1) throws SQLException {
		return impl().absolute(a1);
	}

	@Override
	public void afterLast() throws SQLException {
		impl().afterLast();
	}

	@Override
	public void beforeFirst() throws SQLException {
		impl().beforeFirst();
	}

	@Override
	public void cancelRowUpdates() throws SQLException {
		impl().cancelRowUpdates();
	}

	@Override
	public void clearWarnings() throws SQLException {
		impl().clearWarnings();
	}

	@Override
	public void deleteRow() throws SQLException {
		impl().deleteRow();
	}

	@Override
	public int findColumn(String a1) throws SQLException {
		return impl().findColumn(a1);
	}

	@Override
	public boolean first() throws SQLException {
		return impl().first();
	}

	@Override
	public InputStream getAsciiStream(int a1) throws SQLException {
		return impl().getAsciiStream(a1);
	}

	@Override
	public InputStream getAsciiStream(String a1) throws SQLException {
		return impl().getAsciiStream(a1);
	}

	@Override
	public BigDecimal getBigDecimal(int a1) throws SQLException {
		return impl().getBigDecimal(a1);
	}

	@Override
	public BigDecimal getBigDecimal(String a1, int a2) throws SQLException {
		return impl().getBigDecimal(a1, a2);
	}

	@Override
	public BigDecimal getBigDecimal(int a1, int a2) throws SQLException {
		return impl().getBigDecimal(a1, a2);
	}

	@Override
	public BigDecimal getBigDecimal(String a1) throws SQLException {
		return impl().getBigDecimal(a1);
	}

	@Override
	public InputStream getBinaryStream(String a1) throws SQLException {
		return impl().getBinaryStream(a1);
	}

	@Override
	public InputStream getBinaryStream(int a1) throws SQLException {
		return impl().getBinaryStream(a1);
	}

	@Override
	public Blob getBlob(int a1) throws SQLException {
		return impl().getBlob(a1);
	}

	@Override
	public Blob getBlob(String a1) throws SQLException {
		return impl().getBlob(a1);
	}

	@Override
	public Reader getCharacterStream(String a1) throws SQLException {
		return impl().getCharacterStream(a1);
	}

	@Override
	public Reader getCharacterStream(int a1) throws SQLException {
		return impl().getCharacterStream(a1);
	}

	@Override
	public Clob getClob(String a1) throws SQLException {
		return impl().getClob(a1);
	}

	@Override
	public Clob getClob(int a1) throws SQLException {
		return impl().getClob(a1);
	}

	@Override
	public int getConcurrency() throws SQLException {
		return impl().getConcurrency();
	}

	@Override
	public String getCursorName() throws SQLException {
		return impl().getCursorName();
	}

	@Override
	public int getFetchDirection() throws SQLException {
		return impl().getFetchDirection();
	}

	@Override
	public int getFetchSize() throws SQLException {
		return impl().getFetchSize();
	}

	@Override
	public int getHoldability() throws SQLException {
		return impl().getHoldability();
	}

	@Override
	public ResultSetMetaData getMetaData() throws SQLException {
		return impl().getMetaData();
	}

	@Override
	public Reader getNCharacterStream(int a1) throws SQLException {
		return impl().getNCharacterStream(a1);
	}

	@Override
	public Reader getNCharacterStream(String a1) throws SQLException {
		return impl().getNCharacterStream(a1);
	}

	@Override
	public NClob getNClob(String a1) throws SQLException {
		return impl().getNClob(a1);
	}

	@Override
	public NClob getNClob(int a1) throws SQLException {
		return impl().getNClob(a1);
	}

	@Override
	public String getNString(int a1) throws SQLException {
		return impl().getNString(a1);
	}

	@Override
	public String getNString(String a1) throws SQLException {
		return impl().getNString(a1);
	}

	@Override
	public int getRow() throws SQLException {
		return impl().getRow();
	}

	@Override
	public RowId getRowId(String a1) throws SQLException {
		return impl().getRowId(a1);
	}

	@Override
	public RowId getRowId(int a1) throws SQLException {
		return impl().getRowId(a1);
	}

	@Override
	public SQLXML getSQLXML(String a1) throws SQLException {
		return impl().getSQLXML(a1);
	}

	@Override
	public SQLXML getSQLXML(int a1) throws SQLException {
		return impl().getSQLXML(a1);
	}

	@Override
	public Statement getStatement() throws SQLException {
		return impl().getStatement();
	}

	@Override
	public Time getTime(int a1, Calendar a2) throws SQLException {
		return impl().getTime(a1, a2);
	}

	@Override
	public Time getTime(String a1, Calendar a2) throws SQLException {
		return impl().getTime(a1, a2);
	}

	@Override
	public Time getTime(int a1) throws SQLException {
		return impl().getTime(a1);
	}

	@Override
	public Time getTime(String a1) throws SQLException {
		return impl().getTime(a1);
	}

	@Override
	public Timestamp getTimestamp(int a1) throws SQLException {
		return impl().getTimestamp(a1);
	}

	@Override
	public Timestamp getTimestamp(String a1) throws SQLException {
		return impl().getTimestamp(a1);
	}

	@Override
	public Timestamp getTimestamp(String a1, Calendar a2) throws SQLException {
		return impl().getTimestamp(a1, a2);
	}

	@Override
	public Timestamp getTimestamp(int a1, Calendar a2) throws SQLException {
		return impl().getTimestamp(a1, a2);
	}

	@Override
	public InputStream getUnicodeStream(String a1) throws SQLException {
		return impl().getUnicodeStream(a1);
	}

	@Override
	public InputStream getUnicodeStream(int a1) throws SQLException {
		return impl().getUnicodeStream(a1);
	}

	@Override
	public SQLWarning getWarnings() throws SQLException {
		return impl().getWarnings();
	}

	@Override
	public void insertRow() throws SQLException {
		impl().insertRow();
	}

	@Override
	public boolean isAfterLast() throws SQLException {
		return impl().isAfterLast();
	}

	@Override
	public boolean isBeforeFirst() throws SQLException {
		return impl().isBeforeFirst();
	}

	@Override
	public boolean isClosed() throws SQLException {
		return impl().isClosed();
	}

	@Override
	public boolean isLast() throws SQLException {
		return impl().isLast();
	}

	@Override
	public boolean last() throws SQLException {
		return impl().last();
	}

	@Override
	public void moveToCurrentRow() throws SQLException {
		impl().moveToCurrentRow();
	}

	@Override
	public void moveToInsertRow() throws SQLException {
		impl().moveToInsertRow();
	}

	@Override
	public void refreshRow() throws SQLException {
		impl().refreshRow();
	}

	@Override
	public boolean relative(int a1) throws SQLException {
		return impl().relative(a1);
	}

	@Override
	public boolean rowDeleted() throws SQLException {
		return impl().rowDeleted();
	}

	@Override
	public boolean rowInserted() throws SQLException {
		return impl().rowInserted();
	}

	@Override
	public boolean rowUpdated() throws SQLException {
		return impl().rowUpdated();
	}

	@Override
	public void setFetchDirection(int a1) throws SQLException {
		impl().setFetchDirection(a1);
	}

	@Override
	public void setFetchSize(int a1) throws SQLException {
		impl().setFetchSize(a1);
	}

	@Override
	public void updateArray(String a1, Array a2) throws SQLException {
		impl().updateArray(a1, a2);
	}

	@Override
	public void updateArray(int a1, Array a2) throws SQLException {
		impl().updateArray(a1, a2);
	}

	@Override
	public void updateAsciiStream(int a1, InputStream a2) throws SQLException {
		impl().updateAsciiStream(a1, a2);
	}

	@Override
	public void updateAsciiStream(String a1, InputStream a2, int a3) throws SQLException {
		impl().updateAsciiStream(a1, a2, a3);
	}

	@Override
	public void updateAsciiStream(String a1, InputStream a2) throws SQLException {
		impl().updateAsciiStream(a1, a2);
	}

	@Override
	public void updateAsciiStream(int a1, InputStream a2, long a3) throws SQLException {
		impl().updateAsciiStream(a1, a2, a3);
	}

	@Override
	public void updateAsciiStream(int a1, InputStream a2, int a3) throws SQLException {
		impl().updateAsciiStream(a1, a2, a3);
	}

	@Override
	public void updateAsciiStream(String a1, InputStream a2, long a3) throws SQLException {
		impl().updateAsciiStream(a1, a2, a3);
	}

	@Override
	public void updateBigDecimal(int a1, BigDecimal a2) throws SQLException {
		impl().updateBigDecimal(a1, a2);
	}

	@Override
	public void updateBigDecimal(String a1, BigDecimal a2) throws SQLException {
		impl().updateBigDecimal(a1, a2);
	}

	@Override
	public void updateBinaryStream(int a1, InputStream a2, int a3) throws SQLException {
		impl().updateBinaryStream(a1, a2, a3);
	}

	@Override
	public void updateBinaryStream(String a1, InputStream a2, int a3) throws SQLException {
		impl().updateBinaryStream(a1, a2, a3);
	}

	@Override
	public void updateBinaryStream(int a1, InputStream a2, long a3) throws SQLException {
		impl().updateBinaryStream(a1, a2, a3);
	}

	@Override
	public void updateBinaryStream(String a1, InputStream a2, long a3) throws SQLException {
		impl().updateBinaryStream(a1, a2, a3);
	}

	@Override
	public void updateBinaryStream(String a1, InputStream a2) throws SQLException {
		impl().updateBinaryStream(a1, a2);
	}

	@Override
	public void updateBinaryStream(int a1, InputStream a2) throws SQLException {
		impl().updateBinaryStream(a1, a2);
	}

	@Override
	public void updateBlob(int a1, Blob a2) throws SQLException {
		impl().updateBlob(a1, a2);
	}

	@Override
	public void updateBlob(String a1, InputStream a2) throws SQLException {
		impl().updateBlob(a1, a2);
	}

	@Override
	public void updateBlob(int a1, InputStream a2) throws SQLException {
		impl().updateBlob(a1, a2);
	}

	@Override
	public void updateBlob(int a1, InputStream a2, long a3) throws SQLException {
		impl().updateBlob(a1, a2, a3);
	}

	@Override
	public void updateBlob(String a1, Blob a2) throws SQLException {
		impl().updateBlob(a1, a2);
	}

	@Override
	public void updateBlob(String a1, InputStream a2, long a3) throws SQLException {
		impl().updateBlob(a1, a2, a3);
	}

	@Override
	public void updateBoolean(int a1, boolean a2) throws SQLException {
		impl().updateBoolean(a1, a2);
	}

	@Override
	public void updateBoolean(String a1, boolean a2) throws SQLException {
		impl().updateBoolean(a1, a2);
	}

	@Override
	public void updateByte(int a1, byte a2) throws SQLException {
		impl().updateByte(a1, a2);
	}

	@Override
	public void updateByte(String a1, byte a2) throws SQLException {
		impl().updateByte(a1, a2);
	}

	@Override
	public void updateBytes(int a1, byte[] a2) throws SQLException {
		impl().updateBytes(a1, a2);
	}

	@Override
	public void updateBytes(String a1, byte[] a2) throws SQLException {
		impl().updateBytes(a1, a2);
	}

	@Override
	public void updateCharacterStream(int a1, Reader a2, int a3) throws SQLException {
		impl().updateCharacterStream(a1, a2, a3);
	}

	@Override
	public void updateCharacterStream(String a1, Reader a2, int a3) throws SQLException {
		impl().updateCharacterStream(a1, a2, a3);
	}

	@Override
	public void updateCharacterStream(int a1, Reader a2, long a3) throws SQLException {
		impl().updateCharacterStream(a1, a2, a3);
	}

	@Override
	public void updateCharacterStream(String a1, Reader a2, long a3) throws SQLException {
		impl().updateCharacterStream(a1, a2, a3);
	}

	@Override
	public void updateCharacterStream(int a1, Reader a2) throws SQLException {
		impl().updateCharacterStream(a1, a2);
	}

	@Override
	public void updateCharacterStream(String a1, Reader a2) throws SQLException {
		impl().updateCharacterStream(a1, a2);
	}

	@Override
	public void updateClob(int a1, Reader a2) throws SQLException {
		impl().updateClob(a1, a2);
	}

	@Override
	public void updateClob(String a1, Reader a2) throws SQLException {
		impl().updateClob(a1, a2);
	}

	@Override
	public void updateClob(String a1, Reader a2, long a3) throws SQLException {
		impl().updateClob(a1, a2, a3);
	}

	@Override
	public void updateClob(int a1, Reader a2, long a3) throws SQLException {
		impl().updateClob(a1, a2, a3);
	}

	@Override
	public void updateClob(String a1, Clob a2) throws SQLException {
		impl().updateClob(a1, a2);
	}

	@Override
	public void updateClob(int a1, Clob a2) throws SQLException {
		impl().updateClob(a1, a2);
	}

	@Override
	public void updateDate(int a1, Date a2) throws SQLException {
		impl().updateDate(a1, a2);
	}

	@Override
	public void updateDate(String a1, Date a2) throws SQLException {
		impl().updateDate(a1, a2);
	}

	@Override
	public void updateDouble(String a1, double a2) throws SQLException {
		impl().updateDouble(a1, a2);
	}

	@Override
	public void updateDouble(int a1, double a2) throws SQLException {
		impl().updateDouble(a1, a2);
	}

	@Override
	public void updateFloat(int a1, float a2) throws SQLException {
		impl().updateFloat(a1, a2);
	}

	@Override
	public void updateFloat(String a1, float a2) throws SQLException {
		impl().updateFloat(a1, a2);
	}

	@Override
	public void updateInt(String a1, int a2) throws SQLException {
		impl().updateInt(a1, a2);
	}

	@Override
	public void updateInt(int a1, int a2) throws SQLException {
		impl().updateInt(a1, a2);
	}

	@Override
	public void updateLong(String a1, long a2) throws SQLException {
		impl().updateLong(a1, a2);
	}

	@Override
	public void updateLong(int a1, long a2) throws SQLException {
		impl().updateLong(a1, a2);
	}

	@Override
	public void updateNCharacterStream(int a1, Reader a2, long a3) throws SQLException {
		impl().updateNCharacterStream(a1, a2, a3);
	}

	@Override
	public void updateNCharacterStream(String a1, Reader a2) throws SQLException {
		impl().updateNCharacterStream(a1, a2);
	}

	@Override
	public void updateNCharacterStream(String a1, Reader a2, long a3) throws SQLException {
		impl().updateNCharacterStream(a1, a2, a3);
	}

	@Override
	public void updateNCharacterStream(int a1, Reader a2) throws SQLException {
		impl().updateNCharacterStream(a1, a2);
	}

	@Override
	public void updateNClob(String a1, Reader a2, long a3) throws SQLException {
		impl().updateNClob(a1, a2, a3);
	}

	@Override
	public void updateNClob(String a1, NClob a2) throws SQLException {
		impl().updateNClob(a1, a2);
	}

	@Override
	public void updateNClob(int a1, Reader a2) throws SQLException {
		impl().updateNClob(a1, a2);
	}

	@Override
	public void updateNClob(int a1, Reader a2, long a3) throws SQLException {
		impl().updateNClob(a1, a2, a3);
	}

	@Override
	public void updateNClob(int a1, NClob a2) throws SQLException {
		impl().updateNClob(a1, a2);
	}

	@Override
	public void updateNClob(String a1, Reader a2) throws SQLException {
		impl().updateNClob(a1, a2);
	}

	@Override
	public void updateNString(int a1, String a2) throws SQLException {
		impl().updateNString(a1, a2);
	}

	@Override
	public void updateNString(String a1, String a2) throws SQLException {
		impl().updateNString(a1, a2);
	}

	@Override
	public void updateNull(String a1) throws SQLException {
		impl().updateNull(a1);
	}

	@Override
	public void updateNull(int a1) throws SQLException {
		impl().updateNull(a1);
	}

	@Override
	public void updateObject(int a1, Object a2, int a3) throws SQLException {
		impl().updateObject(a1, a2, a3);
	}

	@Override
	public void updateObject(String a1, Object a2) throws SQLException {
		impl().updateObject(a1, a2);
	}

	@Override
	public void updateObject(String a1, Object a2, int a3) throws SQLException {
		impl().updateObject(a1, a2, a3);
	}

	@Override
	public void updateObject(int a1, Object a2) throws SQLException {
		impl().updateObject(a1, a2);
	}

	@Override
	public void updateRef(String a1, Ref a2) throws SQLException {
		impl().updateRef(a1, a2);
	}

	@Override
	public void updateRef(int a1, Ref a2) throws SQLException {
		impl().updateRef(a1, a2);
	}

	@Override
	public void updateRow() throws SQLException {
		impl().updateRow();
	}

	@Override
	public void updateRowId(String a1, RowId a2) throws SQLException {
		impl().updateRowId(a1, a2);
	}

	@Override
	public void updateRowId(int a1, RowId a2) throws SQLException {
		impl().updateRowId(a1, a2);
	}

	@Override
	public void updateSQLXML(int a1, SQLXML a2) throws SQLException {
		impl().updateSQLXML(a1, a2);
	}

	@Override
	public void updateSQLXML(String a1, SQLXML a2) throws SQLException {
		impl().updateSQLXML(a1, a2);
	}

	@Override
	public void updateShort(String a1, short a2) throws SQLException {
		impl().updateShort(a1, a2);
	}

	@Override
	public void updateShort(int a1, short a2) throws SQLException {
		impl().updateShort(a1, a2);
	}

	@Override
	public void updateString(int a1, String a2) throws SQLException {
		impl().updateString(a1, a2);
	}

	@Override
	public void updateString(String a1, String a2) throws SQLException {
		impl().updateString(a1, a2);
	}

	@Override
	public void updateTime(int a1, Time a2) throws SQLException {
		impl().updateTime(a1, a2);
	}

	@Override
	public void updateTime(String a1, Time a2) throws SQLException {
		impl().updateTime(a1, a2);
	}

	@Override
	public void updateTimestamp(String a1, Timestamp a2) throws SQLException {
		impl().updateTimestamp(a1, a2);
	}

	@Override
	public void updateTimestamp(int a1, Timestamp a2) throws SQLException {
		impl().updateTimestamp(a1, a2);
	}

	@Override
	public boolean wasNull() throws SQLException {
		return impl().wasNull();
	}

	@Override
	public boolean isWrapperFor(Class<?> a1) throws SQLException {
		return impl().isWrapperFor(a1);
	}

	@Override
	public <T> T unwrap(Class<T> a1) throws SQLException {
		return impl().unwrap(a1);
	}

	@Override
	public <T> T getObject(int columnIndex, Class<T> type) throws SQLException {
		return impl().getObject(columnIndex, type);
	}

	@Override
	public <T> T getObject(String columnLabel, Class<T> type) throws SQLException {
		return impl().getObject(columnLabel, type);
	}

}
