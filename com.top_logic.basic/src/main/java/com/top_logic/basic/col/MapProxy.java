/*
 * SPDX-FileCopyrightText: 2012 (c) Business Operation Systems GmbH <info@top-logic.com>
 * 
 * SPDX-License-Identifier: AGPL-3.0-only OR LicenseRef-BOS-TopLogic-1.0
 */
package com.top_logic.basic.col;

import java.util.Collection;
import java.util.Map;
import java.util.Set;


/**
 * Abstract proxy for {@link Map}.
 * 
 * @see #impl()
 * 
 * @author Automatically generated by <code>com.top_logic.basic.generate.ProxyGenerator</code>
 */
public abstract class MapProxy<K, V> implements Map<K, V> {

	/**
	 * The underlying implementation.
	 */
	protected abstract Map<K, V> impl();

	@Override
	public V get(Object a1) {
		return impl().get(a1);
	}

	@Override
	public V put(K a1, V a2) {
		return impl().put(a1, a2);
	}

	@Override
	public boolean equals(Object a1) {
		return impl().equals(a1);
	}

	@Override
	public Collection<V> values() {
		return impl().values();
	}

	@Override
	public int hashCode() {
		return impl().hashCode();
	}

	@Override
	public void clear() {
		impl().clear();
	}

	@Override
	public boolean isEmpty() {
		return impl().isEmpty();
	}

	@Override
	public Set<Map.Entry<K, V>> entrySet() {
		return impl().entrySet();
	}

	@Override
	public void putAll(Map<? extends K, ? extends V> a1) {
		impl().putAll(a1);
	}

	@Override
	public int size() {
		return impl().size();
	}

	@Override
	public V remove(Object a1) {
		return impl().remove(a1);
	}

	@Override
	public Set<K> keySet() {
		return impl().keySet();
	}

	@Override
	public boolean containsKey(Object a1) {
		return impl().containsKey(a1);
	}

	@Override
	public boolean containsValue(Object a1) {
		return impl().containsValue(a1);
	}

}
