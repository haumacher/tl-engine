/* Generated By:JavaCC: Do not edit this line. TemplateParser.java */
package com.top_logic.template.parser;

public class TemplateParser implements TemplateParserConstants {
        public void setTabSize(int size) {
        jj_input_stream.setTabSize(size);
   }

   public int getTabSize() {
        return jj_input_stream.getTabSize(0);
   }

  final public com.top_logic.template.tree.TemplateNode Start() throws ParseException {
    com.top_logic.template.tree.TemplateNode r;
    r = Template();
    jj_consume_token(0);
        {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public com.top_logic.template.tree.TemplateNode Template() throws ParseException {
    java.util.List < com.top_logic.template.tree.TemplateNode > nodes = new java.util.ArrayList < > ();
    Token t, openTag;
    com.top_logic.template.tree.TemplateNode f;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPENSTARTTAG:
      case LITERAL:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LITERAL:
        t = jj_consume_token(LITERAL);
                com.top_logic.template.tree.LiteralText lt = new com.top_logic.template.tree.LiteralText(t.image);
                lt.setColBegin(t.beginColumn);
                lt.setRowBegin(t.beginLine);
                lt.setColEnd(t.endColumn);
                lt.setRowEnd(t.endLine);
                nodes.add(lt);
        break;
      case OPENSTARTTAG:
        openTag = jj_consume_token(OPENSTARTTAG);
        FunctionStm(nodes, openTag);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
        {if (true) return new com.top_logic.template.tree.Template(nodes);}
    throw new Error("Missing return statement in function");
  }

  final public void FunctionStm(java.util.List < com.top_logic.template.tree.TemplateNode > nodes, Token openTag) throws ParseException {
    com.top_logic.template.tree.TemplateNode n;
                openTag = checkOpenTag(nodes, openTag);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      n = AssignStm(openTag);
      break;
    case DEFINE:
      n = DefineStm(openTag);
      break;
    case IF:
      n = IfStm(openTag);
      break;
    case FOREACH:
      n = ForeachStm(openTag);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        nodes.add(n);
  }

/* < OPENSTARTTAG > < ASSIGN > Reference() [ AttributeStm() ] < CLOSETAG > */
  final public com.top_logic.template.tree.AssignStatement AssignStm(Token openTag) throws ParseException {
    java.util.Map < String, String > attributes = new java.util.HashMap < > ();
    com.top_logic.template.tree.Expression expr;
    Token e;
    jj_consume_token(ASSIGN);
    expr = Expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      attributes = AttributeStm();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    e = jj_consume_token(CLOSETAG);
        com.top_logic.template.tree.AssignStatement assStm = new com.top_logic.template.tree.AssignStatement(expr, attributes);
        assStm.setColBegin(openTag.beginColumn);
        assStm.setRowBegin(openTag.beginLine);
        assStm.setColEnd(e.endColumn);
        assStm.setRowEnd(e.endLine);
        {if (true) return assStm;}
    throw new Error("Missing return statement in function");
  }

/* < OPENSTARTTAG > < DEFINE > < LPAREN > <IDENTIFIER> < AS > < EXPRESSION > < RPAREN > [ AttributeStm() ] < CLOSETAG > */
  final public com.top_logic.template.tree.DefineStatement DefineStm(Token openTag) throws ParseException {
    java.util.Map < String, String > attributes = new java.util.HashMap < > ();
    com.top_logic.template.tree.TemplateNode n;
    Token t, end;
    com.top_logic.template.tree.Expression expr;
    jj_consume_token(DEFINE);
    jj_consume_token(LPAREN);
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(AS);
    expr = Expression();
    jj_consume_token(RPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      attributes = AttributeStm();
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    end = jj_consume_token(CLOSETAG);
        com.top_logic.template.tree.DefineStatement defStm = new com.top_logic.template.tree.DefineStatement(t.image, expr, attributes);
        defStm.setColBegin(openTag.beginColumn);
        defStm.setRowBegin(openTag.beginLine);
        defStm.setColEnd(end.endColumn);
        defStm.setRowEnd(end.endLine);
        {if (true) return defStm;}
    throw new Error("Missing return statement in function");
  }

/* < OPENSTARTTAG > < IF > < LPAREN > Expression() < RPAREN > [ AttributeStm() ] < CLOSETAG > Template()[ < OPENSTARTTAG > < ELSE > < CLOSEEMPTYTAG > Template() ]< OPENENDTAG > < IF > < CLOSETAG > */
  final public com.top_logic.template.tree.TemplateNode IfStm(Token openTag) throws ParseException {
    java.util.Map < String, String > attributes = new java.util.HashMap < > ();
    com.top_logic.template.tree.Expression expr;
    Token e;
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
    expr = Expression();
    jj_consume_token(RPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      attributes = AttributeStm();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(CLOSETAG);
        com.top_logic.template.tree.IfStatement ifStm = new com.top_logic.template.tree.IfStatement(expr, attributes);
        ifStm.setColBegin(openTag.beginColumn);
        ifStm.setRowBegin(openTag.beginLine);
    TemplateIf(ifStm);
    jj_consume_token(OPENENDTAG);
    jj_consume_token(IF);
    e = jj_consume_token(CLOSETAG);
        ifStm.setColEnd(e.endColumn);
        ifStm.setRowEnd(e.endLine);
        {if (true) return ifStm;}
    throw new Error("Missing return statement in function");
  }

  final public void TemplateIf(com.top_logic.template.tree.IfStatement ifStm) throws ParseException {
    java.util.List < com.top_logic.template.tree.TemplateNode > nodes = new java.util.ArrayList < > ();
    Token t, openTag;
    com.top_logic.template.tree.TemplateNode f;
    label_2:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LITERAL:
        t = jj_consume_token(LITERAL);
                com.top_logic.template.tree.LiteralText lt = new com.top_logic.template.tree.LiteralText(t.image);
                lt.setColBegin(t.beginColumn);
                lt.setRowBegin(t.beginLine);
                lt.setColEnd(t.endColumn);
                lt.setRowEnd(t.endLine);
                nodes.add(lt);
        break;
      case OPENSTARTTAG:
        openTag = jj_consume_token(OPENSTARTTAG);
                openTag = checkOpenTag(nodes, openTag);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGN:
          f = AssignStm(openTag);
          break;
        case DEFINE:
          f = DefineStm(openTag);
          break;
        case IF:
          f = IfStm(openTag);
          break;
        case FOREACH:
          f = ForeachStm(openTag);
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                nodes.add(f);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPENSTARTTAG:
      openTag = jj_consume_token(OPENSTARTTAG);
                        openTag = checkOpenTag(nodes, openTag);
      elseStm(ifStm);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
        ifStm.setThenStm(new com.top_logic.template.tree.Template(nodes));
  }

  final public void elseStm(com.top_logic.template.tree.IfStatement ifStm) throws ParseException {
    com.top_logic.template.tree.TemplateNode elseStm = null;
    jj_consume_token(ELSE);
    jj_consume_token(CLOSEEMPTYTAG);
    elseStm = Template();
        ifStm.setElseStm(elseStm);
  }

  final public com.top_logic.template.tree.Expression Expression() throws ParseException {
    com.top_logic.template.tree.Expression n;
    n = NegatedExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
    case NE:
    case GE:
    case LE:
    case GT:
    case LT:
    case AND:
    case OR:
      n = OperatorExpression(n);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
        {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public com.top_logic.template.tree.Expression NegatedExpression() throws ParseException {
    com.top_logic.template.tree.Expression n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case MODREF:
    case FUNCREF:
    case SQUOTE:
    case TRUE:
    case FALSE:
    case IDENTIFIER:
    case WILDCARD:
      n = AtomicExpression();
      break;
    case NOT:
      n = UnaryExpression();
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public com.top_logic.template.tree.Expression UnaryExpression() throws ParseException {
    String op;
    com.top_logic.template.tree.Expression n;
    op = UnaryOperator();
    n = NegatedExpression();
        {if (true) return new com.top_logic.template.tree.UnaryExpression(op, n);}
    throw new Error("Missing return statement in function");
  }

  final public com.top_logic.template.tree.Expression AtomicExpression() throws ParseException {
    com.top_logic.template.tree.Expression n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUNCREF:
      n = FunctionCall();
      break;
    case SQUOTE:
    case TRUE:
    case FALSE:
      n = ConstantExpression();
      break;
    case MODREF:
    case IDENTIFIER:
    case WILDCARD:
      n = Reference();
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      n = Expression();
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

/* < FUNCREF > < IDENTIFIER > < LPAREN > (Expression() (< COMMA > Expression())*)? < RPAREN > */
  final public com.top_logic.template.tree.Expression FunctionCall() throws ParseException {
    java.util.List < com.top_logic.template.tree.Expression > expressions = new java.util.ArrayList < > ();
    com.top_logic.template.tree.Expression n;
    Token t, f, e;
    int colBegin = -1, rowBegin = -1;
    boolean posSet = false;
    f = jj_consume_token(FUNCREF);
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAREN);
        if (!posSet)
        {
                colBegin = f.beginColumn;
                rowBegin = f.beginLine;
                posSet = true;
        }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
    case LPAREN:
    case MODREF:
    case FUNCREF:
    case SQUOTE:
    case TRUE:
    case FALSE:
    case IDENTIFIER:
    case WILDCARD:
      n = Expression();
            expressions.add(n);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMMA);
        n = Expression();
                expressions.add(n);
      }
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    e = jj_consume_token(RPAREN);
        com.top_logic.template.tree.FunctionCall fc = new com.top_logic.template.tree.FunctionCall(t.image, expressions);
        fc.setColBegin(colBegin);
        fc.setRowBegin(rowBegin);
        fc.setColEnd(e.endColumn);
        fc.setRowEnd(e.endLine);
        {if (true) return fc;}
    throw new Error("Missing return statement in function");
  }

  final public com.top_logic.template.tree.ConstantExpression ConstantExpression() throws ParseException {
        Token t = new Token();
    Token s, e;
    com.top_logic.template.tree.ConstantExpression c;
    int colBegin =-1, rowBegin =-1, colEnd =-1, rowEnd =-1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      t = jj_consume_token(TRUE);
                c = new com.top_logic.template.tree.ConstantExpression(Boolean.valueOf(t.image));
                colBegin = t.beginColumn;
                rowBegin = t.beginLine;
                colEnd = t.endColumn;
                rowEnd = t.endLine;
      break;
    case FALSE:
      t = jj_consume_token(FALSE);
                c = new com.top_logic.template.tree.ConstantExpression(Boolean.valueOf(t.image));
                colBegin = t.beginColumn;
                rowBegin = t.beginLine;
                colEnd = t.endColumn;
                rowEnd = t.endLine;
      break;
    case SQUOTE:
      s = jj_consume_token(SQUOTE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL:
        t = jj_consume_token(STRING_LITERAL);
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      e = jj_consume_token(EQUOTE);
                c =  new com.top_logic.template.tree.ConstantExpression(com.top_logic.template.tree.ConstantExpression.decode(t.image));
                colBegin = s.beginColumn;
                rowBegin = s.beginLine;
                colEnd = e.endColumn;
                rowEnd = e.endLine;
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        c.setColBegin(colBegin);
        c.setRowBegin(rowBegin);
        c.setColEnd(colEnd);
        c.setRowEnd(rowEnd);
        {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

/* Expression() Operator() Expression() */
  final public com.top_logic.template.tree.BinaryExpression OperatorExpression(com.top_logic.template.tree.Expression expr) throws ParseException {
    String op;
    com.top_logic.template.tree.Expression e;
    op = Operator();
    e = Expression();
        com.top_logic.template.tree.BinaryExpression binExpr = new com.top_logic.template.tree.BinaryExpression(expr, op, e);
        binExpr.setColBegin(expr.getColBegin());
        binExpr.setRowBegin(expr.getRowBegin());
        binExpr.setColEnd(e.getColEnd());
        binExpr.setRowEnd(e.getRowEnd());
        {if (true) return binExpr;}
    throw new Error("Missing return statement in function");
  }

/*< OPENSTARTTAG > < FOREACH > < LPAREN > FunctionAssignment() < RPAREN > [ AttributeStm() ] < CLOSETAG > Template()< OPENENDTAG > < FOREACH > < CLOSETAG > */
  final public com.top_logic.template.tree.ForeachStatement ForeachStm(Token openTag) throws ParseException {
    java.util.Map < String, String > attributes = new java.util.HashMap < > ();
    com.top_logic.template.tree.TemplateNode n;
    Token t, end;
    com.top_logic.template.tree.Expression expr;
    jj_consume_token(FOREACH);
    jj_consume_token(LPAREN);
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(IN);
    expr = Expression();
    jj_consume_token(RPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      attributes = AttributeStm();
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    jj_consume_token(CLOSETAG);
    n = Template();
    jj_consume_token(OPENENDTAG);
    jj_consume_token(FOREACH);
    end = jj_consume_token(CLOSETAG);
        com.top_logic.template.tree.ForeachStatement feStm = new com.top_logic.template.tree.ForeachStatement(t.image, expr, attributes, n);
        feStm.setColBegin(openTag.beginColumn);
        feStm.setRowBegin(openTag.beginLine);
        feStm.setColEnd(end.endColumn);
        feStm.setRowEnd(end.endLine);
        {if (true) return feStm;}
    throw new Error("Missing return statement in function");
  }

  final public com.top_logic.template.tree.Reference Reference() throws ParseException {
    boolean isModelRef = false;
    String ns = null;
    java.util.List < String > path = new java.util.ArrayList < > ();
    Token n;
    int colBegin =-1, rowBegin =-1, colEnd =-1, rowEnd =-1;
    boolean posSet = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MODREF:
      n = jj_consume_token(MODREF);
            isModelRef = true;
            colBegin = n.beginColumn;
            rowBegin = n.beginLine;
            posSet = true;
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    if (jj_2_2(2)) {
      n = jj_consume_token(IDENTIFIER);
            ns = n.image;
            if (!posSet)
            {
                colBegin = n.beginColumn;
                colEnd = n.endColumn;
                rowBegin = n.beginLine;
                rowEnd = n.endLine;
                posSet = true;
            }
      jj_consume_token(COLON);
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      n = jj_consume_token(IDENTIFIER);
      break;
    case WILDCARD:
      n = jj_consume_token(WILDCARD);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        path.add(n.image);
        if (!posSet)
        {
            colBegin = n.beginColumn;
            colEnd = n.endColumn;
            rowBegin = n.beginLine;
            rowEnd = n.endLine;
        }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_4;
      }
      jj_consume_token(DOT);
      n = jj_consume_token(IDENTIFIER);
            path.add(n.image);
            colEnd = n.endColumn;
            rowEnd = n.endLine;
    }
        com.top_logic.template.tree.Reference ref = new com.top_logic.template.tree.Reference(isModelRef, ns, path);
        ref.setColBegin(colBegin);
        ref.setRowBegin(rowBegin);
        ref.setColEnd(colEnd);
        ref.setRowEnd(rowEnd);
        {if (true) return ref;}
    throw new Error("Missing return statement in function");
  }

/* (Attr() < ASSIGN > < QUOTE > AttrValue() < QUOTE >)+ */
  final public java.util.Map < String, String > AttributeStm() throws ParseException {
    java.util.Map < String, String > statements = new java.util.HashMap < > ();
    String key;
    com.top_logic.template.tree.LiteralText lt;
    label_5:
    while (true) {
      key = Attr();
      jj_consume_token(ASSIGN);
      lt = AttrValue();
            statements.put(key, Unescape(lt.getValue()));
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_5;
      }
    }
        {if (true) return statements;}
    throw new Error("Missing return statement in function");
  }

/* un-escapes escaped quotation marks */
  final public String Unescape(String aString) throws ParseException {
        if (aString != null)
        {
            {if (true) return aString.replaceAll("\u005c\u005c\u005c\u005c\u005c"", "\u005c"");}
        }
        {if (true) return aString;}
    throw new Error("Missing return statement in function");
  }

  final public Token checkOpenTag(java.util.List<com.top_logic.template.tree.TemplateNode> nodes, Token openTag) throws ParseException {
                if (openTag.image.length() > 2) {
                        String text = openTag.image.substring(0, openTag.image.length()-2);
                        com.top_logic.template.tree.LiteralText lt = new com.top_logic.template.tree.LiteralText(text);
                lt.setColBegin(openTag.beginColumn);
                lt.setRowBegin(openTag.beginLine);
                lt.setColEnd(openTag.endColumn - 2);
                lt.setRowEnd(openTag.endLine);
                openTag.beginColumn = openTag.endColumn - 2;
                nodes.add(lt);
                }
                {if (true) return openTag;}
    throw new Error("Missing return statement in function");
  }

  final public String Attr() throws ParseException {
    Token t;
    t = jj_consume_token(IDENTIFIER);
        {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public com.top_logic.template.tree.LiteralText AttrValue() throws ParseException {
    Token t;
    jj_consume_token(SQUOTE);
    t = jj_consume_token(STRING_LITERAL);
    jj_consume_token(EQUOTE);
        {if (true) return new com.top_logic.template.tree.LiteralText(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public String UnaryOperator() throws ParseException {
    Token t;
    t = jj_consume_token(NOT);
        {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public String Operator() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      t = jj_consume_token(EQ);
      break;
    case NE:
      t = jj_consume_token(NE);
      break;
    case GE:
      t = jj_consume_token(GE);
      break;
    case LE:
      t = jj_consume_token(LE);
      break;
    case GT:
      t = jj_consume_token(GT);
      break;
    case LT:
      t = jj_consume_token(LT);
      break;
    case AND:
      t = jj_consume_token(AND);
      break;
    case OR:
      t = jj_consume_token(OR);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3R_11() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_6() {
    if (jj_scan_token(LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_6()) {
    jj_scanpos = xsp;
    if (jj_3R_7()) return true;
    }
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(DEFINE)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(FOREACH)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  private boolean jj_3R_7() {
    if (jj_scan_token(OPENSTARTTAG)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_8()) {
    jj_scanpos = xsp;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) return true;
    }
    }
    }
    return false;
  }

  /** Generated Token Manager. */
  public TemplateParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[22];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40000000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x40000000,0x40000000,0xff00,0x18030000,0x18020000,0x1000000,0x18030000,0x0,0x0,0x0,0x8000000,0x0,0x2000000,0x0,0xff00,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x4000,0x4000,0x72,0x80000,0x80000,0x80000,0x72,0x4000,0x0,0x0,0x483200,0x483200,0x0,0x483200,0x800,0x3200,0x80000,0x0,0x480000,0x0,0x80000,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public TemplateParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public TemplateParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new TemplateParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public TemplateParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new TemplateParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public TemplateParser(TemplateParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(TemplateParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[55];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 22; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 55; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
