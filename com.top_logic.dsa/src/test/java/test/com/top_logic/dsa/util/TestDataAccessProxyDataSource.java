/*
 * SPDX-FileCopyrightText: 2006 (c) Business Operation Systems GmbH <info@top-logic.com>
 * 
 * SPDX-License-Identifier: AGPL-3.0-only OR LicenseRef-BOS-TopLogic-1.0
 */
package test.com.top_logic.dsa.util;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import junit.framework.Test;
import junit.framework.TestCase;

import test.com.top_logic.basic.module.ServiceTestSetup;
import test.com.top_logic.dsa.DSATestSetup;

import com.top_logic.basic.Logger;
import com.top_logic.basic.io.FileUtilities;
import com.top_logic.basic.io.StreamUtilities;
import com.top_logic.dsa.DataAccessProxy;
import com.top_logic.dsa.DataAccessService;
import com.top_logic.dsa.DatabaseAccessException;
import com.top_logic.dsa.util.DataAccessProxyDataSource;
import com.top_logic.dsa.util.MimeTypes;

/**
 * Testcase for the {@link DataAccessProxyDataSource}.
 * 
 * @author    <a href=mailto:kha@top-logic.com>Klaus Halfmann</a>
 */
public class TestDataAccessProxyDataSource extends TestCase {

    /** Demo Data used for Streaming */
    public static final byte DATA1[] = 
		("This is some Data generated by " + TestDataAccessProxyDataSource.class.getName()).getBytes();

    /** Demo Data used for Streaming */
    public static final byte DATA2[] = 
		("Variants of data from " + TestDataAccessProxyDataSource.class.getName() + " plus extra Ending").getBytes();

    /** Name of Sentry to use for TEsting */
    public static final String ENTRY_NAME = "TestDataAccessProxyDataSource.txt";

	private static final boolean NOFORCE = false;

    /**
     * A single test does it all.
     */
    public void testMain() throws DatabaseAccessException, IOException {
		DataAccessProxy fileDAP = new DataAccessProxy("testFile://");
        DataAccessProxy  entry   = fileDAP.getChildProxy(ENTRY_NAME);
        if (entry.exists()) {
            entry.delete(NOFORCE);
        }
        entry = fileDAP.createEntryProxy(ENTRY_NAME, getInputStream1());
        
        DataAccessProxyDataSource dapDS1 = new DataAccessProxyDataSource(entry);
        
        assertEquals(ENTRY_NAME  , dapDS1.getName());
        assertEquals(ENTRY_NAME  , dapDS1.getName());  // Is cached, so do it twice
        assertEquals("text/plain", dapDS1.getContentType());
		InputStream in1 = getInputStream1();
		try {
			InputStream in2 = dapDS1.getInputStream();
			try {
				assertTrue (StreamUtilities.equalsStreamContents(in1, in2));
			} finally {
				in2.close();
			}
		} finally {
			in1.close();
		}

		InputStream input = getInputStream2();
        try {
        	OutputStream output = dapDS1.getOutputStream();
			try {
				FileUtilities.copyStreamContents(input, output);
			} finally {
				output.close();
			}
		}
		finally {
		    input.close();
		}
		InputStream in11 = getInputStream2();
		try {
			InputStream in2 = entry.getContent().getStream();
			try {
				assertTrue (StreamUtilities.equalsStreamContents(in11, in2));
			} finally {
				in2.close();
			}
		} finally {
			in11.close();
		}

        
        DataAccessProxyDataSource dapDS2 = new DataAccessProxyDataSource(entry, "OtherName");
        
        assertEquals("OtherName", dapDS2.getName());
        assertEquals("OtherName", dapDS2.getName()); 
        assertEquals("text/plain", dapDS2.getContentType());
        
        assertSame(entry, dapDS2.getDataAccessProxy());
    }
    
	public void testUnknownContentType() throws DatabaseAccessException {
		DataAccessProxy fileDAP = new DataAccessProxy("testFile://");
		String childName = "file.unknownContentTyped";
		DataAccessProxy entry = fileDAP.getChildProxy(childName);
		if (entry.exists()) {
			entry.delete(NOFORCE);
		}
		entry = fileDAP.createEntryProxy(childName, getInputStream1());

		DataAccessProxyDataSource dapds = new DataAccessProxyDataSource(entry);
		String expectedForUnknown = "application/octet-stream";
		assertEquals("javax.activation.DataSource.getContentType() suggested '" + expectedForUnknown
				+ "' for unknown content types.", expectedForUnknown, dapds.getContentType());

	}
    
    /** Create an InputStream with some demo-Data */
    protected InputStream getInputStream1() {
        return new ByteArrayInputStream(DATA1);
    }
 
    /** Create an InputStream with some demo-Data */
    protected InputStream getInputStream2() {
        return new ByteArrayInputStream(DATA2);
    }

    /** Return the suite of Tests to perform */
    public static Test suite () {
		Test innerTest = ServiceTestSetup.createSetup(TestDataAccessProxyDataSource.class,
			DataAccessService.Module.INSTANCE, MimeTypes.Module.INSTANCE);
		return DSATestSetup.createDSATestSetup(innerTest);
    }

    /** Main function for direct execution */
    public static void main (String[] args) {
        Logger.configureStdout();
        
        junit.textui.TestRunner.run (suite ());
    }

}
