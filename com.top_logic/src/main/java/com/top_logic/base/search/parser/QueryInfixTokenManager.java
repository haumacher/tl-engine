// $codepro.audit.disable
/* Generated By:JavaCC: Do not edit this line. QueryInfixTokenManager.java */
/*
 * SPDX-FileCopyrightText: 2001 (c) Business Operation Systems GmbH <info@top-logic.com>
 * 
 * SPDX-License-Identifier: AGPL-3.0-only OR LicenseRef-BOS-TopLogic-1.0
 */
/* Generated By:JavaCC: Do not edit this line. QueryInfixTokenManager.java */
package com.top_logic.base.search.parser;


public class QueryInfixTokenManager implements QueryInfixConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_1(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 41;
            return 6;
         }
         return -1;
      case 1:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 1;
            return 53;
         }
         return -1;
      case 2:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 2;
            return 53;
         }
         return -1;
      case 3:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 3;
            return 53;
         }
         return -1;
      case 4:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 4;
            return 53;
         }
         return -1;
      case 5:
         if ((active0 & 0x200L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 41;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 6:
         if ((active0 & 0x200L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 41;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 7:
         if ((active0 & 0x200L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 41;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 6);
      case 41:
         return jjStopAtPos(0, 8);
      case 44:
         return jjStopAtPos(0, 7);
      case 79:
         return jjMoveStringLiteralDfa1_1(0x200L);
      case 167:
         return jjMoveStringLiteralDfa1_1(0x4000000000L);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 82:
         return jjMoveStringLiteralDfa2_1(active0, 0x200L);
      case 167:
         return jjMoveStringLiteralDfa2_1(active0, 0x4000000000L);
      default :
         break;
   }
   return jjStartNfa_1(0, active0);
}
private final int jjMoveStringLiteralDfa2_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa3_1(active0, 0x200L);
      case 167:
         return jjMoveStringLiteralDfa3_1(active0, 0x4000000000L);
      default :
         break;
   }
   return jjStartNfa_1(1, active0);
}
private final int jjMoveStringLiteralDfa3_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa4_1(active0, 0x200L);
      case 78:
         return jjMoveStringLiteralDfa4_1(active0, 0x4000000000L);
      default :
         break;
   }
   return jjStartNfa_1(2, active0);
}
private final int jjMoveStringLiteralDfa4_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa5_1(active0, 0x4000000000L);
      case 82:
         return jjMoveStringLiteralDfa5_1(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_1(3, active0);
}
private final int jjMoveStringLiteralDfa5_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa6_1(active0, 0x200L);
      case 84:
         return jjMoveStringLiteralDfa6_1(active0, 0x4000000000L);
      default :
         break;
   }
   return jjStartNfa_1(4, active0);
}
private final int jjMoveStringLiteralDfa6_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa7_1(active0, 0x200L);
      case 85:
         return jjMoveStringLiteralDfa7_1(active0, 0x4000000000L);
      default :
         break;
   }
   return jjStartNfa_1(5, active0);
}
private final int jjMoveStringLiteralDfa7_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(5, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa8_1(active0, 0x4000000000L);
      case 89:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(7, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_1(6, active0);
}
private final int jjMoveStringLiteralDfa8_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(6, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa9_1(active0, 0x4000000000L);
      default :
         break;
   }
   return jjStartNfa_1(7, active0);
}
private final int jjMoveStringLiteralDfa9_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(7, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa10_1(active0, 0x4000000000L);
      default :
         break;
   }
   return jjStartNfa_1(8, active0);
}
private final int jjMoveStringLiteralDfa10_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(8, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 167:
         return jjMoveStringLiteralDfa11_1(active0, 0x4000000000L);
      default :
         break;
   }
   return jjStartNfa_1(9, active0);
}
private final int jjMoveStringLiteralDfa11_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(9, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 167:
         return jjMoveStringLiteralDfa12_1(active0, 0x4000000000L);
      default :
         break;
   }
   return jjStartNfa_1(10, active0);
}
private final int jjMoveStringLiteralDfa12_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(10, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 167:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(12, 38);
         break;
      default :
         break;
   }
   return jjStartNfa_1(11, active0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
private final int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 220;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         /* MatchLoop: */ do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 17);
                  else if ((0x280000000000L & l) != 0L)
                     jjAddStates(18, 21);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(148, 184);
                  else if (curChar == 60)
                     jjAddStates(22, 23);
                  else if (curChar == 36)
                  {
                     if (kind > 41)
                        kind = 41;
                     jjCheckNAdd(53);
                  }
                  else if (curChar == 39)
                     jjCheckNAddStates(24, 26);
                  else if (curChar == 34)
                     jjCheckNAddStates(27, 29);
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 21;
                  else if (curChar == 61)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  else if (curChar == 38)
                  {
                     if (kind > 14)
                        kind = 14;
                  }
                  else if (curChar == 35)
                  {
                     if (kind > 12)
                        kind = 12;
                  }
                  else if (curChar == 33)
                  {
                     if (kind > 10)
                        kind = 10;
                  }
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 28)
                        kind = 28;
                     jjCheckNAddStates(30, 34);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 28)
                        kind = 28;
                     jjCheckNAddStates(35, 42);
                  }
                  else if (curChar == 62)
                  {
                     if (kind > 21)
                        kind = 21;
                  }
                  else if (curChar == 60)
                  {
                     if (kind > 20)
                        kind = 20;
                  }
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if (curChar == 36)
                  {
                     if (kind > 13)
                        kind = 13;
                  }
                  break;
               case 6:
               case 53:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAdd(53);
                  break;
               case 2:
                  if (curChar == 35 && kind > 12)
                     kind = 12;
                  break;
               case 3:
                  if (curChar == 36 && kind > 13)
                     kind = 13;
                  break;
               case 4:
                  if (curChar == 38 && kind > 14)
                     kind = 14;
                  break;
               case 16:
                  if (curChar == 62 && kind > 18)
                     kind = 18;
                  break;
               case 17:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 61 && kind > 19)
                     kind = 19;
                  break;
               case 19:
                  if (curChar == 60 && kind > 20)
                     kind = 20;
                  break;
               case 20:
                  if (curChar == 62 && kind > 21)
                     kind = 21;
                  break;
               case 21:
                  if (curChar == 61 && kind > 23)
                     kind = 23;
                  break;
               case 22:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 61 && kind > 24)
                     kind = 24;
                  break;
               case 28:
                  if (curChar == 34)
                     jjCheckNAddStates(27, 29);
                  break;
               case 29:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 31:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 32:
                  if (curChar == 34 && kind > 36)
                     kind = 36;
                  break;
               case 33:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(43, 46);
                  break;
               case 34:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 35:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 36:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(34);
                  break;
               case 37:
                  if (curChar == 39)
                     jjCheckNAddStates(24, 26);
                  break;
               case 38:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(24, 26);
                  break;
               case 40:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(24, 26);
                  break;
               case 41:
                  if (curChar == 39 && kind > 36)
                     kind = 36;
                  break;
               case 42:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(47, 50);
                  break;
               case 43:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(24, 26);
                  break;
               case 44:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 45:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(43);
                  break;
               case 52:
                  if (curChar != 36)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAdd(53);
                  break;
               case 91:
                  if (curChar == 60)
                     jjAddStates(22, 23);
                  break;
               case 92:
                  if (curChar == 45 && kind > 17)
                     kind = 17;
                  break;
               case 93:
                  if (curChar == 61 && kind > 22)
                     kind = 22;
                  break;
               case 143:
                  if ((0x280000000000L & l) != 0L)
                     jjAddStates(18, 21);
                  break;
               case 144:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAddTwoStates(145, 146);
                  break;
               case 145:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAddTwoStates(145, 146);
                  break;
               case 147:
                  if (curChar == 46)
                     jjCheckNAdd(148);
                  break;
               case 148:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAddStates(51, 53);
                  break;
               case 150:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(151);
                  break;
               case 151:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAddTwoStates(151, 152);
                  break;
               case 153:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(54, 60);
                  break;
               case 154:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(154, 155);
                  break;
               case 155:
                  if (curChar != 46)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAddStates(61, 63);
                  break;
               case 156:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAddStates(61, 63);
                  break;
               case 158:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(159);
                  break;
               case 159:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAddTwoStates(159, 152);
                  break;
               case 160:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(160, 161);
                  break;
               case 162:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(163);
                  break;
               case 163:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAddTwoStates(163, 152);
                  break;
               case 164:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(64, 66);
                  break;
               case 166:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(167);
                  break;
               case 167:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(167, 152);
                  break;
               case 168:
                  if (curChar != 48)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAddStates(67, 69);
                  break;
               case 170:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAddTwoStates(170, 146);
                  break;
               case 171:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAddTwoStates(171, 146);
                  break;
               case 172:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAddStates(30, 34);
                  break;
               case 173:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAddTwoStates(173, 174);
                  break;
               case 175:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjCheckNAdd(175);
                  break;
               case 176:
                  if (curChar != 48)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAddStates(35, 42);
                  break;
               case 178:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAddTwoStates(178, 174);
                  break;
               case 179:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAddTwoStates(179, 174);
                  break;
               case 181:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjstateSet[jjnewStateCnt++] = 181;
                  break;
               case 182:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAdd(182);
                  break;
               case 183:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(148, 184);
                  break;
               case 184:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  jjCheckNAddStates(70, 72);
                  break;
               case 186:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(187);
                  break;
               case 187:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  jjCheckNAddTwoStates(187, 188);
                  break;
               case 189:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 17);
                  break;
               case 190:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(190, 191);
                  break;
               case 191:
                  if (curChar != 46)
                     break;
                  if (kind > 34)
                     kind = 34;
                  jjCheckNAddStates(73, 75);
                  break;
               case 192:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  jjCheckNAddStates(73, 75);
                  break;
               case 194:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(195);
                  break;
               case 195:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  jjCheckNAddTwoStates(195, 188);
                  break;
               case 196:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(196, 197);
                  break;
               case 198:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(199);
                  break;
               case 199:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  jjCheckNAddTwoStates(199, 188);
                  break;
               case 200:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(76, 78);
                  break;
               case 202:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(203);
                  break;
               case 203:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(203, 188);
                  break;
               case 204:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 205;
                  break;
               case 205:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(206, 207);
                  break;
               case 206:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(207);
                  break;
               case 207:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 208;
                  break;
               case 208:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjstateSet[jjnewStateCnt++] = 209;
                  break;
               case 209:
                  if ((0x3ff000000000000L & l) != 0L && kind > 39)
                     kind = 39;
                  break;
               case 210:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(211);
                  break;
               case 211:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 212;
                  break;
               case 212:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(213, 214);
                  break;
               case 213:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(214);
                  break;
               case 214:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 215;
                  break;
               case 215:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjstateSet[jjnewStateCnt++] = 216;
                  break;
               case 216:
                  if ((0x3ff000000000000L & l) != 0L && kind > 40)
                     kind = 40;
                  break;
               case 217:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(79, 81);
                  break;
               case 218:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(204);
                  break;
               case 219:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(218, 204);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         /* MatchLoop: */ do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 41)
                        kind = 41;
                     jjCheckNAdd(53);
                  }
                  else if (curChar == 124)
                  {
                     if (kind > 15)
                        kind = 15;
                  }
                  else if (curChar == 64)
                  {
                     if (kind > 11)
                        kind = 11;
                  }
                  if ((0x100040L & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                  }
                  else if ((0x4002L & l) != 0L)
                  {
                     if (kind > 27)
                        kind = 27;
                  }
                  else if (curChar == 71)
                     jjAddStates(82, 83);
                  else if (curChar == 76)
                     jjAddStates(84, 86);
                  else if (curChar == 69)
                     jjAddStates(87, 88);
                  else if (curChar == 73)
                     jjAddStates(89, 92);
                  else if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 23;
                  else if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 14;
                  else if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 6;
                  if (curChar == 65)
                     jjAddStates(93, 94);
                  else if (curChar == 84)
                     jjAddStates(95, 97);
                  else if (curChar == 78)
                     jjAddStates(98, 99);
                  else if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 50;
                  else if (curChar == 69)
                  {
                     if (kind > 26)
                        kind = 26;
                  }
                  else if (curChar == 76)
                  {
                     if (kind > 25)
                        kind = 25;
                  }
                  else if (curChar == 77)
                  {
                     if (kind > 16)
                        kind = 16;
                  }
                  break;
               case 6:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 41)
                        kind = 41;
                     jjCheckNAdd(53);
                  }
                  if (curChar == 82)
                  {
                     if (kind > 15)
                        kind = 15;
                  }
                  break;
               case 1:
                  if (curChar == 64 && kind > 11)
                     kind = 11;
                  break;
               case 5:
                  if (curChar == 124 && kind > 15)
                     kind = 15;
                  break;
               case 7:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 77 && kind > 16)
                     kind = 16;
                  break;
               case 9:
                  if (curChar == 83 && kind > 16)
                     kind = 16;
                  break;
               case 10:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 72)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 24:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 76 && kind > 25)
                     kind = 25;
                  break;
               case 26:
               case 100:
                  if (curChar == 69 && kind > 26)
                     kind = 26;
                  break;
               case 27:
                  if ((0x4002L & l) != 0L && kind > 27)
                     kind = 27;
                  break;
               case 29:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 30:
                  if (curChar == 92)
                     jjAddStates(100, 102);
                  break;
               case 31:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 38:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(24, 26);
                  break;
               case 39:
                  if (curChar == 92)
                     jjAddStates(103, 105);
                  break;
               case 40:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(24, 26);
                  break;
               case 46:
                  if ((0x100040L & l) != 0L && kind > 37)
                     kind = 37;
                  break;
               case 47:
                  if (curChar == 69 && kind > 37)
                     kind = 37;
                  break;
               case 48:
                  if (curChar == 83)
                     jjCheckNAdd(47);
                  break;
               case 49:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAdd(53);
                  break;
               case 53:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAdd(53);
                  break;
               case 54:
                  if (curChar == 78)
                     jjAddStates(98, 99);
                  break;
               case 55:
                  if (curChar == 84 && kind > 10)
                     kind = 10;
                  break;
               case 56:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 69 && kind > 27)
                     kind = 27;
                  break;
               case 58:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 73)
                     jjAddStates(89, 92);
                  break;
               case 61:
                  if (curChar == 68 && kind > 11)
                     kind = 11;
                  break;
               case 62:
                  if (curChar == 69 && kind > 17)
                     kind = 17;
                  break;
               case 63:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 84 && kind > 18)
                     kind = 18;
                  break;
               case 70:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if (curChar == 78 && kind > 24)
                     kind = 24;
                  break;
               case 75:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if (curChar == 84)
                     jjAddStates(95, 97);
                  break;
               case 78:
                  if (curChar == 69 && kind > 12)
                     kind = 12;
                  break;
               case 79:
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if (curChar == 89)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if (curChar == 84 && kind > 13)
                     kind = 13;
                  break;
               case 82:
                  if (curChar == 88)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 85)
                     jjCheckNAdd(47);
                  break;
               case 85:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if (curChar == 65)
                     jjAddStates(93, 94);
                  break;
               case 87:
                  if (curChar == 68 && kind > 14)
                     kind = 14;
                  break;
               case 88:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if (curChar == 76 && kind > 27)
                     kind = 27;
                  break;
               case 90:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 94:
                  if (curChar == 69)
                     jjAddStates(87, 88);
                  break;
               case 95:
                  if (curChar == 83 && kind > 19)
                     kind = 19;
                  break;
               case 96:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 97:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if (curChar == 81)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 101:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 102:
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 103:
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 105:
                  if (curChar == 88)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 106:
                  if (curChar == 76)
                     jjAddStates(84, 86);
                  break;
               case 107:
                  if (curChar == 83 && kind > 20)
                     kind = 20;
                  break;
               case 108:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 109:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 110:
                  if (curChar == 76 && kind > 22)
                     kind = 22;
                  break;
               case 111:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 112:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 113:
                  if (curChar == 81)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 114:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 115:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 116:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 117:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 118:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 119:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 120:
                  if (curChar == 69 && kind > 25)
                     kind = 25;
                  break;
               case 121:
                  if (curChar == 75)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 122:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 123:
                  if (curChar == 71)
                     jjAddStates(82, 83);
                  break;
               case 124:
                  if (curChar == 82 && kind > 21)
                     kind = 21;
                  break;
               case 125:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 126:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 127:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 128:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 129:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 130:
                  if (curChar == 76 && kind > 23)
                     kind = 23;
                  break;
               case 131:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 132:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 133:
                  if (curChar == 81)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 134:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 135:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 136:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 137:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 138:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 139:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 138;
                  break;
               case 140:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 141:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 142:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 146:
                  if ((0x100000001000L & l) != 0L && kind > 28)
                     kind = 28;
                  break;
               case 149:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(106, 107);
                  break;
               case 152:
                  if ((0x5000000050L & l) != 0L && kind > 33)
                     kind = 33;
                  break;
               case 157:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(108, 109);
                  break;
               case 161:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(110, 111);
                  break;
               case 165:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(112, 113);
                  break;
               case 169:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(170);
                  break;
               case 170:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAddTwoStates(170, 146);
                  break;
               case 174:
                  if ((0x100000001000L & l) != 0L && kind > 29)
                     kind = 29;
                  break;
               case 177:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(178);
                  break;
               case 178:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAddTwoStates(178, 174);
                  break;
               case 180:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(181);
                  break;
               case 181:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(181);
                  break;
               case 185:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(114, 115);
                  break;
               case 188:
                  if ((0x5000000050L & l) != 0L && kind > 34)
                     kind = 34;
                  break;
               case 193:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(116, 117);
                  break;
               case 197:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(118, 119);
                  break;
               case 201:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(120, 121);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         /* MatchLoop: */ do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAdd(53);
                  break;
               case 6:
               case 53:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAdd(53);
                  break;
               case 29:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(27, 29);
                  break;
               case 38:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(24, 26);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 220 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 44:
         return jjStopAtPos(0, 7);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         /* MatchLoop: */ do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar != 36)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         /* MatchLoop: */ do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         /* MatchLoop: */ do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   154, 155, 160, 161, 164, 165, 152, 190, 191, 196, 197, 200, 201, 188, 204, 210, 
   211, 217, 144, 147, 153, 168, 92, 93, 38, 39, 41, 29, 30, 32, 145, 146, 
   173, 174, 175, 169, 171, 146, 177, 179, 174, 180, 182, 29, 30, 34, 32, 38, 
   39, 43, 41, 148, 149, 152, 154, 155, 160, 161, 164, 165, 152, 156, 157, 152, 
   164, 165, 152, 169, 171, 146, 184, 185, 188, 192, 193, 188, 200, 201, 188, 218, 
   204, 219, 129, 142, 109, 119, 122, 99, 105, 61, 68, 73, 76, 88, 90, 80, 
   83, 85, 56, 59, 31, 33, 35, 40, 42, 44, 150, 151, 158, 159, 162, 163, 
   166, 167, 186, 187, 194, 195, 198, 199, 202, 203, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec8[i2] & l2) != 0L);
      default : 
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\50", "\54", "\51", 
"\117\122\104\105\122\40\102\131", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, "\247\247\247\116\117\124\125\123\105\104\247\247\247", null, null, null, null, 
null, };
public static final String[] lexStateNames = {
   "INORDERBY", 
   "DEFAULT", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x3f7ffffffc1L, 
};
static final long[] jjtoSkip = {
   0x3eL, 
};
private JavaCharStream input_stream;
private final int[] jjrounds = new int[220];
private final int[] jjstateSet = new int[440];
protected char curChar;
public QueryInfixTokenManager(JavaCharStream stream)
{
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public QueryInfixTokenManager(JavaCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 220; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

private final Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 1;
int defaultLexState = 1;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public final Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
