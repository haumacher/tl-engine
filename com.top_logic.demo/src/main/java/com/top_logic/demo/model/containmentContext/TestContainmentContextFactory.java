/*
 * SPDX-FileCopyrightText: 2024 (c) Business Operation Systems GmbH <info@top-logic.com>
 * 
 * SPDX-License-Identifier: AGPL-3.0-only OR LicenseRef-BOS-TopLogic-1.0
 */
package com.top_logic.demo.model.containmentContext;

/**
 * Factory for <code>test.containmentContext</code> objects.
 * 
 * <p>
 * Note: this is generated code. Do not modify. Instead, create a subclass and register this in the module system.
 * </p>
 * 
 * @author Automatically generated by {@link com.top_logic.element.model.generate.FactoryGenerator}
 */
public class TestContainmentContextFactory extends com.top_logic.element.meta.kbbased.AbstractElementFactory {

	/**
	 * Name of the structure <code>test.containmentContext</code> defined by {@link TestContainmentContextFactory}.
	 */
	public static final String TEST_CONTAINMENT_CONTEXT_STRUCTURE = "test.containmentContext";

	/**
	 * Lookup {@link Thing} type.
	 */
	public static com.top_logic.model.TLClass getThingType() {
		return (com.top_logic.model.TLClass) com.top_logic.util.model.ModelService.getApplicationModel().getModule(TEST_CONTAINMENT_CONTEXT_STRUCTURE).getType(Thing.THING_TYPE);
	}

	/**
	 * Lookup {@link Thing#CREATED_FOR_ATTR} of {@link Thing}.
	 */
	public static com.top_logic.model.TLReference getCreatedForThingAttr() {
		return (com.top_logic.model.TLReference) getThingType().getPart(Thing.CREATED_FOR_ATTR);
	}

	/**
	 * Lookup {@link Thing#NAME_ATTR} of {@link Thing}.
	 */
	public static com.top_logic.model.TLProperty getNameThingAttr() {
		return (com.top_logic.model.TLProperty) getThingType().getPart(Thing.NAME_ATTR);
	}

	/**
	 * Lookup {@link Thing#USES_ATTR} of {@link Thing}.
	 */
	public static com.top_logic.model.TLReference getUsesThingAttr() {
		return (com.top_logic.model.TLReference) getThingType().getPart(Thing.USES_ATTR);
	}

	/**
	 * Lookup {@link Thing#WORLD_ATTR} of {@link Thing}.
	 */
	public static com.top_logic.model.TLReference getWorldThingAttr() {
		return (com.top_logic.model.TLReference) getThingType().getPart(Thing.WORLD_ATTR);
	}

	/**
	 * Lookup {@link Usage} type.
	 */
	public static com.top_logic.model.TLClass getUsageType() {
		return (com.top_logic.model.TLClass) com.top_logic.util.model.ModelService.getApplicationModel().getModule(TEST_CONTAINMENT_CONTEXT_STRUCTURE).getType(Usage.USAGE_TYPE);
	}

	/**
	 * Lookup {@link Usage#REASON_ATTR} of {@link Usage}.
	 */
	public static com.top_logic.model.TLProperty getReasonUsageAttr() {
		return (com.top_logic.model.TLProperty) getUsageType().getPart(Usage.REASON_ATTR);
	}

	/**
	 * Lookup {@link Usage#SUBJECT_ATTR} of {@link Usage}.
	 */
	public static com.top_logic.model.TLReference getSubjectUsageAttr() {
		return (com.top_logic.model.TLReference) getUsageType().getPart(Usage.SUBJECT_ATTR);
	}

	/**
	 * Lookup {@link Usage#THING_ATTR} of {@link Usage}.
	 */
	public static com.top_logic.model.TLReference getThingUsageAttr() {
		return (com.top_logic.model.TLReference) getUsageType().getPart(Usage.THING_ATTR);
	}

	/**
	 * Lookup {@link World} type.
	 */
	public static com.top_logic.model.TLClass getWorldType() {
		return (com.top_logic.model.TLClass) com.top_logic.util.model.ModelService.getApplicationModel().getModule(TEST_CONTAINMENT_CONTEXT_STRUCTURE).getType(World.WORLD_TYPE);
	}

	/**
	 * Lookup {@link World#NAME_ATTR} of {@link World}.
	 */
	public static com.top_logic.model.TLProperty getNameWorldAttr() {
		return (com.top_logic.model.TLProperty) getWorldType().getPart(World.NAME_ATTR);
	}

	/**
	 * Lookup {@link World#THINGS_ATTR} of {@link World}.
	 */
	public static com.top_logic.model.TLReference getThingsWorldAttr() {
		return (com.top_logic.model.TLReference) getWorldType().getPart(World.THINGS_ATTR);
	}

	/**
	 * Name of type <code>Thing</code> in structure {@link #TEST_CONTAINMENT_CONTEXT_STRUCTURE}.
	 * 
	 * @deprecated Use {@link Thing#THING_TYPE}.
	 */
	@Deprecated
	public static final String THING_NODE = Thing.THING_TYPE;

	/**
	 * Storage table name of {@link #THING_NODE} objects.
	 */
	public static final String KO_NAME_THING = "GenericObject";

	/**
	 * Name of type <code>Usage</code> in structure {@link #TEST_CONTAINMENT_CONTEXT_STRUCTURE}.
	 * 
	 * @deprecated Use {@link Usage#USAGE_TYPE}.
	 */
	@Deprecated
	public static final String USAGE_NODE = Usage.USAGE_TYPE;

	/**
	 * Storage table name of {@link #USAGE_NODE} objects.
	 */
	public static final String KO_NAME_USAGE = "GenericObject";

	/**
	 * Name of type <code>World</code> in structure {@link #TEST_CONTAINMENT_CONTEXT_STRUCTURE}.
	 * 
	 * @deprecated Use {@link World#WORLD_TYPE}.
	 */
	@Deprecated
	public static final String WORLD_NODE = World.WORLD_TYPE;

	/**
	 * Storage table name of {@link #WORLD_NODE} objects.
	 */
	public static final String KO_NAME_WORLD = "GenericObject";


	/**
	 * Create an instance of {@link Thing} type.
	 */
	public final Thing createThing(com.top_logic.model.TLObject context) {
		return (Thing) createObject(getThingType(), context);
	}

	/**
	 * Create an instance of {@link Thing} type.
	 */
	public final Thing createThing() {
		return createThing(null);
	}

	/**
	 * Create an instance of {@link Usage} type.
	 */
	public final Usage createUsage(com.top_logic.model.TLObject context) {
		return (Usage) createObject(getUsageType(), context);
	}

	/**
	 * Create an instance of {@link Usage} type.
	 */
	public final Usage createUsage() {
		return createUsage(null);
	}

	/**
	 * Create an instance of {@link World} type.
	 */
	public final World createWorld(com.top_logic.model.TLObject context) {
		return (World) createObject(getWorldType(), context);
	}

	/**
	 * Create an instance of {@link World} type.
	 */
	public final World createWorld() {
		return createWorld(null);
	}

	/**
	 * The singleton instance of {@link TestContainmentContextFactory}.
	 */
	public static TestContainmentContextFactory getInstance() {
		return (TestContainmentContextFactory) com.top_logic.element.model.DynamicModelService.getFactoryFor(TEST_CONTAINMENT_CONTEXT_STRUCTURE);
	}
}
