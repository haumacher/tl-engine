/*
 * SPDX-FileCopyrightText: 2001 (c) Business Operation Systems GmbH <info@top-logic.com>
 * 
 * SPDX-License-Identifier: AGPL-3.0-only OR LicenseRef-BOS-TopLogic-1.0
 */
package com.top_logic.layout.table;

import java.io.IOException;

import com.top_logic.basic.StringServices;
import com.top_logic.basic.col.Mapping;
import com.top_logic.basic.col.Mappings;
import com.top_logic.basic.util.ResKey;
import com.top_logic.basic.xml.TagWriter;
import com.top_logic.layout.DisplayContext;
import com.top_logic.layout.Renderer;
import com.top_logic.layout.ResPrefix;
import com.top_logic.util.Resources;

/**
 * Renderer for writing I18N text to UI.
 *
 * This class will append the prefix and postfix to the given string, translate it via the
 * {@link Resources} and write it via the method {@link TagWriter#writeText(CharSequence)}.
 *
 * @author <a href="mailto:mga@top-logic.com">Michael Gänsler</a>
 */
public class I18NRenderer implements Renderer<String> {

    /** Prefix to be used for translation. */
	private final ResPrefix prefix;

    /** Postfix to be used for translation. */
    private final String postfix;

    /**
	 * Create a new instance of this class.
	 * 
	 * @param resPrefix
	 *        Prefix for I18N, must not be <code>null</code>, may be empty.
	 */
	public I18NRenderer(ResPrefix resPrefix) {
		this(resPrefix, "");
    }

    /**
	 * Create a new instance of this class.
	 * 
	 * @param resPrefix
	 *        Prefix for I18N, must not be <code>null</code>, may be empty.
	 * @param aPostfix
	 *        Postfix for I18N, must not be <code>null</code>, may be empty.
	 */
	public I18NRenderer(ResPrefix resPrefix, String aPostfix) {
		assert resPrefix != null : "Prefix must not be null";
        assert aPostfix != null : "Postfix must not be null";

		this.prefix = resPrefix;
        this.postfix = aPostfix;
    }

    /**
     * @see com.top_logic.layout.Renderer#write(com.top_logic.layout.DisplayContext, com.top_logic.basic.xml.TagWriter, java.lang.Object)
     */
    @Override
	public void write(DisplayContext context, TagWriter out, String aValue) throws IOException {
        if (aValue != null) {
			out.writeText(Resources.getInstance().getString(this.prefix.key(aValue).suffix(this.postfix)));
        }
    }

	/**
	 * Create a {@link Renderer} that displays internationalized strings for
	 * keys created from the object to render by the given {@link Mapping}
	 * <code>(Object -> String)</code>.
	 * 
	 * @param keyMapping
	 *        Mapping of objects to I18N keys.
	 * @return A renderer that renders internationalized texts.
	 */
	public static <T> Renderer<T> getInstance(final Mapping<T, String> keyMapping) {
		return internalGetInstance(ResPrefix.GLOBAL, null, keyMapping);
    }

	/**
	 * Create a {@link Renderer} that displays internationalized strings for
	 * keys created from the object to render by the given {@link Mapping}
	 * <code>(Object -> String)</code>.
	 * 
	 * @param prefix
	 *        A prefix to all keys generated by the given {@link Mapping}.
	 * @param postfix
	 *        A postfix appended to all keys generated by the given
	 *        {@link Mapping}.
	 * @param keyMapping
	 *        Mapping of objects to I18N keys.
	 * @return A renderer that renders internationalized texts.
	 */
	public static <T> Renderer<T> getInstance(final ResPrefix prefix, final String postfix,
			final Mapping<T, String> keyMapping) {
    	return internalGetInstance(prefix, postfix, keyMapping);
    }

	private static <T> Renderer<T> internalGetInstance(final ResPrefix prefix, final String postfix,
			final Mapping<T, String> keyMapping) {
		if (keyMapping == (Object) Mappings.identity()) {
			// If the mapping is the identity, the type parameter must be String, therefore the
			// I18NRenderer implementation is valid.
			@SuppressWarnings({ "rawtypes", "unchecked" })
			Renderer<T> stringRenderer = (Renderer) new I18NRenderer(prefix, postfix);
			return stringRenderer;
		} else if (prefix.isEmpty() && StringServices.isEmpty(postfix)) {
    		// Optimized version without string concatenation.
			return new Renderer<>() {
				@Override
				public void write(DisplayContext context, TagWriter out, T value) throws IOException {
					if (value != null) {
						String key = keyMapping.map(value);
						out.writeText(context.getResources().getString(ResKey.legacy(key)));
					}
				}
    		};
    	} else {
			return new Renderer<>() {
				@Override
				public void write(DisplayContext context, TagWriter out, T value) throws IOException {
					if (value != null) {
						String key = keyMapping.map(value);
						out.writeText(context.getResources().getString(
							prefix.key(key).suffix(postfix)));
					}
				}
    		};
    	}
	}
}
